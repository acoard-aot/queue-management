{
	"info": {
		"_postman_id": "7ad95288-5bae-4ef8-8c99-7382485f960e",
		"name": "API_Test_TheQ_Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup TheQ",
			"item": [
				{
					"name": "Setup-Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d2d115b-dfdf-4a72-a80f-a34d8274b1e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6eab3d7b-ba4b-4412-ae5b-db8b2619c330",
								"exec": [
									"//  See if the use-prefix global has been set.  Use default if not.",
									"let usePrefix = '';",
									"if (pm.globals.get('use-prefix')) {",
									"    console.log(\"==> use-prefix exists\");",
									"    usePrefix = pm.globals.get('use-prefix');",
									"    console.log(\"    --> Prefix is: \" + usePrefix);",
									"    ",
									"    //  Set up all globals, using the correct prefix.",
									"    pm.globals.set('auth_url', pm.globals.get(usePrefix + 'auth_url'));",
									"    pm.globals.set('realm', pm.globals.get(usePrefix + 'realm'));",
									"    pm.globals.set('clientid', pm.globals.get(usePrefix + 'clientid'));",
									"    pm.globals.set('client_secret', pm.globals.get(usePrefix + 'client_secret'));",
									"    pm.globals.set('url', pm.globals.get(usePrefix + 'url'));",
									"",
									"    pm.globals.set('public_url', pm.globals.get(usePrefix + 'public_url'));",
									"    pm.globals.set('public_user_id', pm.globals.get(usePrefix + 'public_user_id'));",
									"    pm.globals.set('public_user_password', pm.globals.get(usePrefix + 'public_user_password'));",
									"}",
									"else {",
									"    console.log(\"==> use-prefix does not exist\");",
									"    console.log(\"    --> No default globals set.\");",
									"}",
									"",
									"//  If no maximum load time defined, set a default.",
									"if (!pm.globals.get('max_load_time')) {",
									"    console.log(\"==> max_load_time not present, default set.\");",
									"    pm.globals.set(\"max_load_time\", JSON.stringify(1503));",
									"}",
									"",
									"//  If no maximum response defined, set a default.",
									"if (!pm.globals.get('max_response_time')) {",
									"    console.log(\"==> max_response_time not present, default set.\");",
									"    pm.globals.set(\"max_response_time\", JSON.stringify(15005));",
									"}",
									"",
									"//  Display the values of all globals.",
									"console.log(\"\");",
									"console.log(\"==> Globals are:\");",
									"console.log(\"    --> auth_url:          \" + pm.globals.get(\"auth_url\"));",
									"console.log(\"    --> realm:             \" + pm.globals.get(\"realm\"));",
									"console.log(\"    --> clientid:          \" + pm.globals.get(\"clientid\"));",
									"console.log(\"    --> client_secret:     \" + pm.globals.get(\"client_secret\"));",
									"console.log(\"    --> url:               \" + pm.globals.get(\"url\"));",
									"console.log(\"    --> max_load_time:     \" + pm.globals.get(\"max_load_time\"));",
									"console.log(\"    --> max_response_time: \" + pm.globals.get(\"max_response_time\"));",
									"console.log(\"    --> public_url:        \" + pm.globals.get(\"public_url\"));",
									"console.log(\"    --> public_user_id:    \" + pm.globals.get(\"public_user_id\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Dummy data."
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a23421f-4e99-4416-8665-e9f0e93bcace",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.globals.set(\"token\", jsonData.access_token);\n\t    pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n\t    if (err) {\n\t        console.log(err);\n\t    }\n\t    // console.log(err ? err : res.json());\n\t} else {\n\t    pm.globals.set(\"token\", 0);\n\t    pm.globals.set(\"refresh_token\", 0);\n\t    pm.globals.set(\"token_expires\", 0);\n\t    pm.globals.set(\"refresh_token_expires\", 0);\n\t}\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bdf2fce-7785-4b2c-8fbe-a43504937364",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthToken-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a036dbab-20af-4c1a-8849-4f670ebe04ee",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: authurl + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n         + '&username=' + userid \n         + '&password=' + password\n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else {\n      var jsonData = res.json();\n      pm.globals.set(\"token\", jsonData.access_token);\n      pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n      pm.globals.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.globals.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-AuthRefresh-Script",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "208cb673-d016-4a35-adde-e292aed35991",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nrefresh_token = environment.refresh_token;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' + clientid \n         + '&refresh_token=' + refresh_token \n         + '&client_secret=' + client_secret\n  }\n};\n\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.globals.set(\"token\", jsonData.access_token);\n    pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n    pm.globals.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.globals.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40d93e2-bbc9-4629-a998-25cfe1becd26",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Get the maximum response time allowed.\r\nmax_response_time = JSON.parse(globals.max_response_time);\r\n\r\n//  Check to make sure the response time was within the maximum allowed.\r\npm.test('Response time less than ' + max_response_time.toString() + 'ms', function(){\r\n    pm.expect(pm.response.responseTime).to.be.below(max_response_time);\r\n});\r\n\r\n//  Other tests.\r\npm.test(\"Response code for request is 200\", function(){\r\n    pm.response.to.have.status(200);\r\n});\r\npm.test('Response header should have Content-Type of application/json', function() {\r\n    pm.response.to.have.header('content-type', 'application/json');\r\n});\r\npm.test('Response body be in JSON format', function() {\r\n    pm.response.to.be.json; \r\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Complex-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fade9aa3-7d7d-47c4-9a21-5415e23c1230",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"complex_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Get the maximum response time allowed.\nmax_response_time = JSON.parse(globals.max_response_time);\n\n//  Check to make sure the response time was within the maximum allowed.\npm.test('Response time less than ' + max_response_time.toString() + 'ms', function(){\n    pm.expect(pm.response.responseTime).to.be.below(max_response_time);\n});\n\n//  Other tests.\npm.test(\"Response code for request is 200\", function(){\n    pm.response.to.have.status(200);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Create-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d714326-8b47-433f-9379-aefc155606b8",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Get the maximum response time allowed.\nmax_response_time = JSON.parse(globals.max_response_time);\n\n//  Check to make sure the response time was within the maximum allowed.\npm.test('Response time less than ' + max_response_time.toString() + 'ms', function(){\n    pm.expect(pm.response.responseTime).to.be.below(max_response_time);\n});\n\n//  Other tests.\npm.test(\"Response status code should be 201 CREATED\", function(){\n    pm.response.to.have.status(201);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Citizen-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "525ed496-ce04-48a2-a32a-702987bd0066",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"citizen_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var citizenSchema = {\n    \"type\" : \"array\",\n    \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"accurate_time_ind\": {\"type\": \"number\"},\n            \"ticket_number\": {\"type\": [\"null\", \"string\"]},\n            \"citizen_name\": {\"type\": [\"null\", \"string\"]},\n            \"qt_xn_citizen_ind\": {\"type\": \"number\"},\n            \"user_id\": {\"type\": [\"null\", \"number\"]},\n            \"service_reqs\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"channel\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"channel_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"channel_name\"]\n                        },\n                        \"channel_id\": {\"type\": \"number\"},\n                        \"citizen_id\": {\"type\": \"number\"},\n                        \"periods\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"csr\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"counter_id\": {\"type\": \"number\"},\n                                            \"qt_xn_csr_ind\": {\"type\": \"number\"},\n                                            \"username\": {\"type\": \"string\"},\n                                        },\n                                        \"required\": [\"counter_id\", \"qt_xn_csr_ind\", \"username\"]\n                                    },\n                                    \"csr_id\": {\"type\": \"number\"},\n                                    \"period_id\": {\"type\": \"number\"},\n                                    \"ps\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"ps_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"ps_name\"]\n                                    },\n                                    \"ps_id\": {\"type\": \"number\"},\n                                    \"time_end\": {\"type\": [\"null\", \"string\"]},\n                                    \"time_start\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"csr\", \"csr_id\", \"period_id\", \"ps\", \"ps_id\", \"time_end\", \"time_start\"]\n                            }\n                        },\n                        \"quantity\": {\"type\": \"number\"},\n                        \"service\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                \"parent\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"service_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"service_name\"]\n                                },\n                                \"parent_id\": {\"type\": \"number\"},\n                                \"service_name\": {\"type\": \"string\"},\n                            },\n                            \"required\": [\"external_service_name\", \"online_availability\", \"online_link\", \"parent\", \"parent_id\", \"service_name\"]\n                        },\n                        \"service_id\": {\"type\": \"number\"},\n                        \"sr_id\": {\"type\": \"number\"},\n                        \"sr_number\": {\"type\": \"number\"},\n                        \"sr_state\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"sr_code\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"sr_code\"]\n                        }\n                    },\n                    \"required\": [\"channel\", \"channel_id\", \"citizen_id\", \"periods\", \"quantity\", \"service\", \"service_id\",\n                                 \"sr_id\", \"sr_number\", \"sr_state\"]\n                }\n            },\n            \"user\": {\"type\": [\"null\", \"object\"]},\n            \"citizen_id\": {\"type\": \"number\"},\n            \"counter_id\": {\"type\": [\"null\", \"number\"]},\n            \"counter\": {\"type\": [\"null\", \"number\"]},\n            \"start_time\": {\"type\": \"string\"},\n            \"citizen_comments\": {\"type\": [\"null\", \"string\"]},\n            \"priority\": {\"type\": \"number\"},\n            \"cs\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"cs_state_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"cs_state_name\"]\n            },\n            \"office_id\": {\"type\": \"number\"},\n        },\n        \"required\": [\"accurate_time_ind\", \"ticket_number\", \"citizen_name\", \"qt_xn_citizen_ind\", \"user_id\",\n                     \"service_reqs\", \"citizen_id\", \"counter_id\", \"start_time\",\n                     \"citizen_comments\", \"priority\", \"cs\", \"office_id\"]\n    },\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"citizens\")) {\n\tallElements = jsonData.citizens;\n};\n\nif (jsonData.hasOwnProperty(\"citizen\")) {\n\tallElements = [];\n\tallElements.push(jsonData.citizen);\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Citizen Schema\", function(){\n    pm.expect(tv4.validate(allElements, citizenSchema)).to.be.true;\n});\n\nvar elementCount = 0;\n\n//  If there are some citizens, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each channel, create list of citizen ids.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Citizen (\" + elementCount + \"): \" + element.citizen_id + \" - \";\n        // tests[testTitle + \"conforms to schema\"] = tv4.validate(element, citizenSchema);\n\n        //Test to see if response schema is valid\n        pm.test(testTitle + \"conforms to schema\", function(){\n            pm.expect(tv4.validate(allElements, citizenSchema)).to.be.true;\n        });\n\n\n        //  Test the authenticate response.\n        pm.test(testTitle + \"qt_xn_citizen_ind must be 0 or 1\", function() {\n            pm.expect(element.qt_xn_citizen_ind).to.be.within(0,1);\n        });\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Service-Schema-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d32f095-7304-4478-bf14-4b4b16e5e947",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"service_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Define the schema.\nvar serviceSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"services\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                    \"timeslot_duration\": {\"type\": [\"null\", \"number\"]},\n                    \"parent\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"service_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"service_name\"]\n                    },\n                    \"service_name\": {\"type\": \"string\"},\n                    \"service_code\": {\"type\": \"string\"},\n                    \"actual_service_ind\": {\"type\": \"number\"},\n                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                    \"service_desc\": {\"type\": \"string\"},\n                    \"service_id\": {\"type\": \"number\"},\n                    \"parent_id\": {\"type\": \"number\"},\n                    \"prefix\": {\"type\": \"string\"},\n                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                    \"external_service_name\": {\"type\": [\"null\", \"string\"]}\n                },\n                \"required\": [\"deleted\", \"display_dashboard_ind\", \"timeslot_duration\", \"parent\",\n                             \"service_name\", \"service_code\", \"actual_service_ind\", \"online_link\",\n                             \"service_desc\", \"service_id\", \"parent_id\", \"prefix\", \"online_availability\",\n                             \"external_service_name\"]\n            }\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"services\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Service Schema\", function(){\n    pm.expect(tv4.validate(jsonData, serviceSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Service-Request-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae3a5e72-38d4-47c1-8149-fd115702e4e0",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"service_request_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var schema = {\n    \"properties\" : {\n        \"channel\" : {\n            \"type\" : \"object\",\n            \"properties\": {\n                \"challen_name\": {\"type\": \"string\"}\n            },\n            \"required\": [\"channel_name\"]\n        },\n        \"channel_id\" : {\"type\" : \"number\"},\n        \"citizen\" : {\n            \"type\" : \"object\",\n            \"properties\": {\n                \"accurate_time_ind\": {\"type\": \"number\"},\n                \"ticket_number\": {\"type\": \"string\"},\n                \"citizen_name\": {\"type\": \"string\"},\n                \"qt_xn_citizen_ind\": {\"type\": \"number\"},\n                \"user_id\": {\"type\": \"null\"},\n                \"user\": {\"type\": \"null\"},\n                \"citizen_id\": {\"type\": \"number\"},\n                \"counter_id\": {\"type\": \"number\"},\n                \"counter\": {\"type\": \"number\"},\n                \"start_time\": {\"type\": \"string\"},\n                \"citizen_comments\": {\"type\": \"string\"},\n                \"priority\": {\"type\": \"number\"},\n                \"cs\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"cs_state_name\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"cs_state_name\"]\n                },\n                \"office_id\": {\"type\": \"number\"},\n            },\n            \"required\": [\"accurate_time_ind\", \"ticket_number\", \"citizen_name\", \"qt_xn_citizen_ind\",\n                         \"user_id\", \"citizen_id\", \"counter_id\", \"start_time\",\n                         \"citizen_comments\", \"priority\", \"cs\", \"office_id\"]\n        },\n        \"citizen_id\" : {\"type\" : \"number\"},\n        \"periods\" : {\n            \"type\" : \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"csr\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"counter_id\": {\"type\": \"number\"},\n                            \"qt_xn_csr_ind\": {\"type\": \"number\"},\n                            \"username\": {\"type\": \"string\"},\n                        },\n                        \"required\": [\"counter_id\", \"qt_xn_csr_ind\", \"username\"]\n                    },\n                    \"csr_id\": {\"type\": \"number\"},\n                    \"period_id\": {\"type\": \"number\"},\n                    \"ps\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"ps_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"ps_name\"]\n                    },\n                    \"ps_id\": {\"type\": \"number\"},\n                    \"time_end\": {\"type\": [\"null\", \"string\"]},\n                    \"time_start\": {\"type\": \"string\"}\n                },\n                \"required\": [\"csr\", \"csr_id\", \"period_id\", \"ps\", \"ps_id\",\n                             \"time_end\", \"time_start\"]\n            }\n        },\n        \"quantity\" : {\"type\" : \"number\"},\n        \"service\" : {\n            \"type\" : \"object\",\n            \"properties\": {\n                \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                \"online_link\": {\"type\": [\"null\", \"string\"]},\n                \"parent\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"service_name\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"service_name\"]\n                },\n                \"parent_id\": {\"type\": \"number\"},\n                \"service_name\": {\"type\": \"string\"},\n            },\n            \"required\": [\"external_service_name\", \"online_availability\", \"online_link\",\n                         \"parent\", \"parent_id\", \"service_name\"]\n        },\n        \"service_id\" : {\"type\" : \"number\"},\n        \"sr_id\" : {\"type\" : \"number\"},\n        \"sr_number\": {\"type\": \"number\"},\n        \"sr_state\" : {\n            \"type\" : \"object\",\n            \"properties\": {\n                \"sr_code\": {\"type\": \"string\"}\n            },\n            \"required\": [\"sr_code\"]\n        }\n    },\n    \"required\" : [\n    \t\"sr_id\", \"sr_state\", \"periods\", \"service\", \"citizen\", \"quantity\",\n    \t\"service_id\", \"citizen_id\", \"channel\", \"channel_id\"\n    ]\n};\n\n//  Declare, initialize variables.\nvar allElements = null;\n\nif (jsonData.hasOwnProperty(\"service_requests\")) {\n\tallElements = jsonData.service_requests;\n};\n\nif (jsonData.hasOwnProperty(\"service_request\")) {\n    allElements = [];\n\tallElements.push(jsonData.service_request);\n}\n\nvar elementCount = 0;\n\n//  If there are some service requests, proceed with tests.\nif (allElements !== null) {\n\n    //  Loop to validate schema of each service request.\n    allElements.forEach(function(element) {\n        elementCount ++;\n        var testTitle = \"Service Request (\" + elementCount + \"): \" + element.sr_id + \" - \";\n        tests[testTitle + \"conforms to schema\"] = tv4.validate(element, schema);\n    });\n};"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-One-Service-Request-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58696875-dbec-4436-acb4-ce906134645f",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"one_service_request_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var serviceRequestSchema = {\n    \"type\": \"object\",\n    \"properties\" : {\n        \"service_request\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"channel\" : {\n                    \"type\" : \"object\",\n                    \"properties\": {\n                        \"channel_name\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"channel_name\"]\n                },\n                \"channel_id\" : {\"type\" : \"number\"},\n                \"citizen\" : {\n                    \"type\" : \"object\",\n                    \"properties\": {\n                        \"cs\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"cs_state_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"cs_state_name\"]\n                        },\n                        \"office_id\": {\"type\": \"number\"},\n                        \"priority\": {\"type\": \"number\"},\n                        \"start_time\": {\"type\": \"string\"},\n                        \"citizen_id\": {\"type\": \"number\"},\n                        \"citizen_name\": {\"type\": [\"null\", \"string\"]},\n                        \"qt_xn_citizen_ind\": {\"type\": \"number\"},\n                        \"user_id\": {\"type\": [\"null\", \"number\"]},\n                        \"counter_id\": {\"type\": \"number\"},\n                        \"counter\": {\"type\": \"number\"},\n                        \"citizen_comments\": {\"type\": \"string\"},\n                        \"accurate_time_ind\": {\"type\": \"number\"},\n                        \"ticket_number\": {\"type\": [\"null\", \"string\"]},\n                        \"user\": {\"type\": [\"null\", \"object\"]}\n                    },\n                    \"required\": [\"cs\", \"office_id\", \"priority\", \"start_time\", \"citizen_id\", \"citizen_name\", \"qt_xn_citizen_ind\",\n                                 \"user_id\", \"counter_id\", \"citizen_comments\", \"accurate_time_ind\", \"ticket_number\"]\n                },\n                \"citizen_id\" : {\"type\" : \"number\"},\n                \"periods\" : {\n                    \"type\" : \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"csr\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"counter_id\": {\"type\": \"number\"},\n                                    \"qt_xn_csr_ind\": {\"type\": \"number\"},\n                                    \"username\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"counter_id\", \"qt_xn_csr_ind\", \"username\"]\n                            },\n                            \"csr_id\": {\"type\": \"number\"},\n                            \"period_id\": {\"type\": \"number\"},\n                            \"ps\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"ps_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"ps_name\"]\n                            },\n                            \"ps_id\": {\"type\": \"number\"},\n                            \"time_end\": {\"type\": [\"null\", \"string\"]},\n                            \"time_start\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"csr\", \"csr_id\", \"period_id\", \"ps\", \"ps_id\", \"time_end\", \"time_start\"]\n                    }\n                },\n                \"quantity\" : {\"type\" : \"number\"},\n                \"service\" : {\n                    \"type\" : \"object\",\n                    \"properties\": {\n                        \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                        \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                        \"online_link\": {\"type\": [\"null\", \"string\"]},\n                        \"parent\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"service_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"service_name\"]\n                        }\n                    }\n                },\n                \"service_id\" : {\"type\" : \"number\"},\n                \"sr_id\" : {\"type\" : \"number\"},\n                \"sr_number\": {\"type\": \"number\"},\n                \"sr_state\" : {\n                    \"type\" : \"object\",\n                    \"properties\": {\n                        \"sr_code\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"sr_code\"]\n                },\n            },\n            \"required\" : [\"channel\", \"channel_id\", \"citizen\", \"citizen_id\", \"periods\",\n                          \"quantity\", \"service\", \"service_id\", \"sr_id\", \"sr_number\", \"sr_state\"]\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"service_request\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Service Request Schema\", function(){\n    pm.expect(tv4.validate(jsonData, serviceRequestSchema)).to.be.true;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Get-Active-Citizens-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ece0e41-1205-4515-8f84-5dda5838bde7",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"get_active_citizens_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Declare and initialize variables.\nvar elementCount = 0;\nvar srCount = 0;\nvar isFirstCitizen = true;\n\n\n//  Loop to create list of active citizen ids.\nallElements.forEach(function(element) {\n    srCount = element.service_reqs.length;\n\n    //  If citizen active, add to the list.\n    if (element.cs.cs_state_name === \"Active\") {\n        //console.log(\"Citizen (\" + elementCount + \") \" + element.citizen_id +\n        //    \" Active: SRCount = \" + srCount);\n        citizenIds.push(element.citizen_id);\n\n        //  Save the first citizen.\n        if (isFirstCitizen) {\n            currentCitizen = element;\n            isFirstCitizen = false;\n        }\n    }\n        \n    //  Increment count.\n    elementCount++;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-CSR-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3f5b33f-feca-4d98-8f9c-2e2c54988188",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"csr_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar csrSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"csr\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"counter\": {\"type\": \"number\"},\n                \"counter_id\": {\"type\": \"number\"},\n                \"csr_id\": {\"type\": \"number\"},\n                \"csr_state\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"csr_state_desc\": {\"type\": \"string\"},\n                        \"csr_state_id\": {\"type\": \"number\"},\n                        \"csr_state_name\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"csr_state_desc\", \"csr_state_id\", \"csr_state_name\"]\n                },\n                \"csr_state_id\": {\"type\": \"number\"},\n                \"deleted\": {\"type\": [\"null\", \"string\"]},\n                \"finance_designate\": {\"type\": \"number\"},\n                \"ita2_designate\": {\"type\": \"number\"},\n                \"office\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointment_duration\": {\"type\": [\"null\", \"number\"]},\n                        \"appointments_days_limit\": {\"type\": [\"null\", \"number\"]},\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"back_office_list\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"actual_service_ind\": {\"type\": \"number\"},\n                                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                    \"parent\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"service_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"service_name\"]\n                                    },\n                                    \"parent_id\": {\"type\": \"number\"},\n                                    \"prefix\": {\"type\": \"string\"},\n                                    \"service_code\": {\"type\": \"string\"},\n                                    \"service_desc\": {\"type\": \"string\"},\n                                    \"service_id\": {\"type\": \"number\"},\n                                    \"service_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                             \"external_service_name\", \"online_availability\",\n                                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                             \"service_code\", \"service_desc\", \"service_id\",\n                                             \"service_name\"]\n                            },\n                        },\n                        \"civic_address\": {\"type\": [\"null\", \"string\"]},\n                        \"counters\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"counter_id\": {\"type\": \"number\"},\n                                    \"counter_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"counter_id\", \"counter_name\"]\n                            },\n                        },\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"latitude\": {\"type\": \"number\"},\n                        \"longitude\": {\"type\": \"number\"},\n                        \"max_person_appointment_per_day\": {\"type\": [\"null\", \"number\"]},\n                        \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\"},\n                        \"online_status\": {\"type\": \"string\"},\n                        \"quick_list\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"actual_service_ind\": {\"type\": \"number\"},\n                                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                    \"parent\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"service_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"service_name\"]\n                                    },\n                                    \"parent_id\": {\"type\": \"number\"},\n                                    \"prefix\": {\"type\": \"string\"},\n                                    \"service_code\": {\"type\": \"string\"},\n                                    \"service_desc\": {\"type\": \"string\"},\n                                    \"service_id\": {\"type\": \"number\"},\n                                    \"service_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                             \"external_service_name\", \"online_availability\",\n                                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                             \"service_code\", \"service_desc\", \"service_id\",\n                                             \"service_name\"]\n                            },\n                        },\n                        \"sb\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"sb_id\": {\"type\": \"number\"},\n                                \"sb_type\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"sb_id\", \"sb_type\"]\n                        },\n                        \"sb_id\": {\"type\": \"number\"},\n                        \"telephone\": {\"type\": [\"null\", \"string\"]},\n                        \"timeslots\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"day_of_week\": {\"type\": [\"null\", \"array\"]},\n                                    \"end_time\": {\"type\": \"string\"},\n                                    \"no_of_slots\": {\"type\": \"number\"},\n                                    \"office\": {\"type\": [\"null\", \"number\"]},\n                                    \"start_time\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\",\n                                             \"office\", \"start_time\"]\n                            },\n                        },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\": \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        }\n                    },\n                    \"required\": [\"appointment_duration\", \"appointments_days_limit\",\n                                 \"appointments_enabled_ind\", \"back_office_list\", \"civic_address\",\n                                 \"counters\", \"exams_enabled_ind\", \"latitude\",\n                                 \"longitude\", \"max_person_appointment_per_day\",\n                                 \"office_appointment_message\", \"office_id\", \"office_name\",\n                                 \"office_number\", \"online_status\", \"quick_list\", \"sb\", \"sb_id\",\n                                 \"telephone\", \"timeslots\", \"timezone\"]\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"office_manager\": {\"type\": \"number\"},\n                \"pesticide_designate\": {\"type\": \"number\"},\n                \"qt_xn_csr_ind\": {\"type\": \"number\"},\n                \"receptionist_ind\": {\"type\": \"number\"},\n                \"role\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"role_code\": {\"type\": \"string\"},\n                        \"role_desc\": {\"type\": \"string\"},\n                        \"role_id\": {\"type\": \"number\"}\n                    },\n                    \"required\": [\"role_code\", \"role_desc\", \"role_id\"]\n                },\n                \"role_id\": {\"type\": \"number\"},\n                \"username\": {\"type\": \"string\"}\n            },\n            \"required\": [\"counter\", \"counter_id\", \"csr_id\", \"csr_state\",\n                         \"csr_state_id\", \"deleted\", \"finance_designate\",\n                         \"ita2_designate\", \"office_id\", \"office_manager\",\n                         \"pesticide_designate\", \"qt_xn_csr_ind\", \"receptionist_ind\",\n                         \"role\", \"role_id\", \"username\"]\n        },\n        \"attention_needed\": {\"type\": \"boolean\"},\n        \"active_citizens\": {\"type\": \"array\"},\n        \"back_office_display\": {\"type\": \"string\"},\n        \"recurring_feature_flag\": {\"type\": \"string\"},\n        \"errors\": {}\n    },\n    \"required\": [\"csr\", \"attention_needed\", \"active_citizens\",\n                 \"back_office_display\", \"recurring_feature_flag\", \"errors\"],\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate CSR Schema\", function(){\n    pm.expect(tv4.validate(jsonData, csrSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-One-CSR-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e798405-dcd7-4022-b8ea-eaf59e93fdde",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"onecsr_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar csrSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"csr\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"counter\": {\"type\": \"number\"},\n                \"counter_id\": {\"type\": \"number\"},\n                \"csr_id\": {\"type\": \"number\"},\n                \"csr_state\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"csr_state_desc\": {\"type\": \"string\"},\n                        \"csr_state_id\": {\"type\": \"number\"},\n                        \"csr_state_name\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"csr_state_desc\", \"csr_state_id\", \"csr_state_name\"]\n                },\n                \"csr_state_id\": {\"type\": \"number\"},\n                \"deleted\": {\"type\": [\"null\", \"string\"]},\n                \"finance_designate\": {\"type\": \"number\"},\n                \"ita2_designate\": {\"type\": \"number\"},\n                \"office\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointment_duration\": {\"type\": [\"null\", \"number\"]},\n                        \"appointments_days_limit\": {\"type\": [\"null\", \"number\"]},\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"back_office_list\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"actual_service_ind\": {\"type\": \"number\"},\n                                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                    \"parent\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"service_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"service_name\"]\n                                    },\n                                    \"parent_id\": {\"type\": \"number\"},\n                                    \"prefix\": {\"type\": \"string\"},\n                                    \"service_code\": {\"type\": \"string\"},\n                                    \"service_desc\": {\"type\": \"string\"},\n                                    \"service_id\": {\"type\": \"number\"},\n                                    \"service_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                             \"external_service_name\", \"online_availability\",\n                                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                             \"service_code\", \"service_desc\", \"service_id\",\n                                             \"service_name\"]\n                            },\n                        },\n                        \"civic_address\": {\"type\": [\"null\", \"string\"]},\n                        \"counters\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"counter_id\": {\"type\": \"number\"},\n                                    \"counter_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"counter_id\", \"counter_name\"]\n                            },\n                        },\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"latitude\": {\"type\": \"number\"},\n                        \"longitude\": {\"type\": \"number\"},\n                        \"max_person_appointment_per_day\": {\"type\": [\"null\", \"number\"]},\n                        \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\"},\n                        \"online_status\": {\"type\": \"string\"},\n                        \"quick_list\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"actual_service_ind\": {\"type\": \"number\"},\n                                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                    \"parent\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"service_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"service_name\"]\n                                    },\n                                    \"parent_id\": {\"type\": \"number\"},\n                                    \"prefix\": {\"type\": \"string\"},\n                                    \"service_code\": {\"type\": \"string\"},\n                                    \"service_desc\": {\"type\": \"string\"},\n                                    \"service_id\": {\"type\": \"number\"},\n                                    \"service_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                             \"external_service_name\", \"online_availability\",\n                                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                             \"service_code\", \"service_desc\", \"service_id\",\n                                             \"service_name\"]\n                            },\n                        },\n                        \"sb\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"sb_id\": {\"type\": \"number\"},\n                                \"sb_type\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"sb_id\", \"sb_type\"]\n                        },\n                        \"sb_id\": {\"type\": \"number\"},\n                        \"telephone\": {\"type\": [\"null\", \"string\"]},\n                        \"timeslots\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"day_of_week\": {\"type\": [\"null\", \"array\"]},\n                                    \"end_time\": {\"type\": \"string\"},\n                                    \"no_of_slots\": {\"type\": \"number\"},\n                                    \"office\": {\"type\": [\"null\", \"number\"]},\n                                    \"start_time\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\",\n                                             \"office\", \"start_time\"]\n                            },\n                        },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\": \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        }\n                    },\n                    \"required\": [\"appointment_duration\", \"appointments_days_limit\",\n                                 \"appointments_enabled_ind\", \"back_office_list\", \"civic_address\",\n                                 \"counters\", \"exams_enabled_ind\", \"latitude\",\n                                 \"longitude\", \"max_person_appointment_per_day\",\n                                 \"office_appointment_message\", \"office_id\", \"office_name\",\n                                 \"office_number\", \"online_status\", \"quick_list\", \"sb\", \"sb_id\",\n                                 \"telephone\", \"timeslots\", \"timezone\"]\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"office_manager\": {\"type\": \"number\"},\n                \"pesticide_designate\": {\"type\": \"number\"},\n                \"qt_xn_csr_ind\": {\"type\": \"number\"},\n                \"receptionist_ind\": {\"type\": \"number\"},\n                \"role\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"role_code\": {\"type\": \"string\"},\n                        \"role_desc\": {\"type\": \"string\"},\n                        \"role_id\": {\"type\": \"number\"}\n                    },\n                    \"required\": [\"role_code\", \"role_desc\", \"role_id\"]\n                },\n                \"role_id\": {\"type\": \"number\"},\n                \"username\": {\"type\": \"string\"}\n            },\n            \"required\": [\"counter\", \"counter_id\", \"csr_id\", \"csr_state\",\n                         \"csr_state_id\", \"deleted\", \"finance_designate\",\n                         \"ita2_designate\", \"office_id\", \"office_manager\",\n                         \"pesticide_designate\", \"qt_xn_csr_ind\", \"receptionist_ind\",\n                         \"role\", \"role_id\", \"username\"]\n        },\n        \"errors\" : {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"csr\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate CSR Schema\", function(){\n    pm.expect(tv4.validate(jsonData, csrSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Many-CSRs-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ac49a25-bf25-47c4-a3d6-461fdd38eeec",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"manycsrs_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar manyCsrsSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"csrs\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"counter\": {\"type\": \"number\"},\n                    \"counter_id\": {\"type\": \"number\"},\n                    \"csr_id\": {\"type\": \"number\"},\n                    \"csr_state\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"csr_state_desc\": {\"type\": \"string\"},\n                            \"csr_state_id\": {\"type\": \"number\"},\n                            \"csr_state_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"csr_state_desc\", \"csr_state_id\", \"csr_state_name\"]\n                    },\n                    \"csr_state_id\": {\"type\": \"number\"},\n                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                    \"finance_designate\": {\"type\": \"number\"},\n                    \"ita2_designate\": {\"type\": \"number\"},\n                    \"office_id\": {\"type\": \"number\"},\n                    \"office_manager\": {\"type\": \"number\"},\n                    \"pesticide_designate\": {\"type\": \"number\"},\n                    \"qt_xn_csr_ind\": {\"type\": \"number\"},\n                    \"receptionist_ind\": {\"type\": \"number\"},\n                    \"role\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"role_code\": {\"type\": \"string\"},\n                            \"role_desc\": {\"type\": \"string\"},\n                            \"role_id\": {\"type\": \"number\"}\n                        },\n                        \"required\": [\"role_code\", \"role_desc\", \"role_id\"]\n                    },\n                    \"role_id\": {\"type\": \"number\"},\n                    \"username\": {\"type\": \"string\"}\n                },\n                \"required\": [\"counter\", \"counter_id\", \"csr_id\", \"csr_state\",\n                             \"csr_state_id\", \"deleted\", \"finance_designate\",\n                             \"ita2_designate\", \"office_id\", \"office_manager\",\n                             \"pesticide_designate\", \"qt_xn_csr_ind\", \"receptionist_ind\",\n                             \"role\", \"role_id\", \"username\"]\n            }\n        }\n    }\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate many CSRs Schema\", function(){\n    pm.expect(tv4.validate(jsonData, manyCsrsSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Office-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73d09615-9319-4bbb-b581-9952dfa0e877",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"office_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar officeSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"appointment_duration\": {\"type\": [\"null\", \"number\"]},\n        \"appointments_days_limit\": {\"type\": [\"null\", \"number\"]},\n        \"appointments_enabled_ind\": {\"type\": \"number\"},\n        \"back_office_list\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"actual_service_ind\": {\"type\": \"number\"},\n                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                    \"parent\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"service_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"service_name\"]\n                    },\n                    \"parent_id\": {\"type\": \"number\"},\n                    \"prefix\": {\"type\": \"string\"},\n                    \"service_code\": {\"type\": \"string\"},\n                    \"service_desc\": {\"type\": \"string\"},\n                    \"service_id\": {\"type\": \"number\"},\n                    \"service_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                             \"external_service_name\", \"online_availability\",\n                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                             \"service_code\", \"service_desc\", \"service_id\",\n                             \"service_name\"]\n            },\n        },\n        \"civic_address\": {\"type\": [\"null\", \"string\"]},\n        \"counters\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"counter_id\": {\"type\": \"number\"},\n                    \"counter_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"counter_id\", \"counter_name\"]\n            },\n        },\n        \"exams_enabled_ind\": {\"type\": \"number\"},\n        \"latitude\": {\"type\": \"number\"},\n        \"longitude\": {\"type\": \"number\"},\n        \"max_person_appointment_per_day\": {\"type\": [\"null\", \"number\"]},\n        \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n        \"office_id\": {\"type\": \"number\"},\n        \"office_name\": {\"type\": \"string\"},\n        \"office_number\": {\"type\": \"number\"},\n        \"online_status\": {\"type\": \"string\"},\n        \"quick_list\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"actual_service_ind\": {\"type\": \"number\"},\n                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                    \"parent\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"service_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"service_name\"]\n                    },\n                    \"parent_id\": {\"type\": \"number\"},\n                    \"prefix\": {\"type\": \"string\"},\n                    \"service_code\": {\"type\": \"string\"},\n                    \"service_desc\": {\"type\": \"string\"},\n                    \"service_id\": {\"type\": \"number\"},\n                    \"service_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                             \"external_service_name\", \"online_availability\",\n                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                             \"service_code\", \"service_desc\", \"service_id\",\n                             \"service_name\"]\n            },\n        },\n        \"sb\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"sb_id\": {\"type\": \"number\"},\n                \"sb_type\": {\"type\": \"string\"}\n            },\n            \"required\": [\"sb_id\", \"sb_type\"]\n        },\n        \"sb_id\": {\"type\": \"number\"},\n        \"telephone\": {\"type\": [\"null\", \"string\"]},\n        \"timeslots\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"day_of_week\": {\"type\": [\"null\", \"array\"]},\n                    \"end_time\": {\"type\": \"string\"},\n                    \"no_of_slots\": {\"type\": \"number\"},\n                    \"office\": {\"type\": [\"null\", \"number\"]},\n                    \"start_time\": {\"type\": \"string\"}\n                },\n                \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\",\n                             \"office\", \"start_time\"]\n            },\n        },\n        \"timezone\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"timezone_id\": {\"type\": \"number\"},\n                \"timezone_name\": {\"type\": \"string\"}\n            },\n            \"required\": [\"timezone_id\", \"timezone_name\"]\n        }\n    },\n    \"required\": [\"appointment_duration\", \"appointments_days_limit\",\n                 \"appointments_enabled_ind\", \"back_office_list\", \"civic_address\",\n                 \"counters\", \"exams_enabled_ind\", \"latitude\",\n                 \"longitude\", \"max_person_appointment_per_day\",\n                 \"office_appointment_message\", \"office_id\", \"office_name\",\n                 \"office_number\", \"online_status\", \"quick_list\", \"sb\", \"sb_id\",\n                 \"telephone\", \"timeslots\", \"timezone\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate the Office Schema\", function(){\n    pm.expect(tv4.validate(jsonData, officeSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-All-Offices-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e88fcc30-d980-43d9-89e7-ad364d74ff69",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"all_office_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar allOfficeSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"offices\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"max_person_appointment_per_day\": {\"type\": \"number\"},\n                    \"telephone\": {\"type\": [\"null\", \"string\"]},\n                    \"appointment_days_limit\": {\"type\": \"number\"},\n                    \"online_status:\": {\"type\": \"string\"},\n                    \"sb_id\": {\"type\": \"number\"},\n                    \"office_name\": {\"type\": \"string\"},\n                    \"timezone\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"timezone_id\": {\"type\": \"number\"},\n                            \"timezone_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"timezone_id\", \"timezone_name\"]\n                    },\n                    \"office_number\": {\"type\": \"number\"},\n                    \"appointments_enabled_ind\": {\"type\": \"number\"},\n                    \"sb\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"sb_id\": {\"type\": \"number\"},\n                            \"sb_type\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"sb_id\", \"sb_type\"]\n                    },\n                    \"civic_address\": {\"type\": [\"null\", \"string\"]},\n                    \"exams_enabled_ind\": {\"type\": \"number\"},\n                    \"office_id\": {\"type\": \"number\"},\n                    \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n                    \"latitude\": {\"type\": [\"null\", \"number\"]},\n                    \"counters\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"counter_id\": {\"type\": \"number\"},\n                                \"counter_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"counter_id\", \"counter_name\"]\n                        }\n                    },\n                    \"back_office_list\": {\"type\": \"array\"},\n                    \"longitude\": {\"type\": [\"null\", \"number\"]},\n                    \"appointment_duration\": {\"type\": \"number\"},\n                    \"quick_list\": {\"type\": \"array\"},\n                    \"timeslots\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"day_of_week\": {\"type\": \"array\"},\n                                \"end_time\": {\"type\": \"string\"},\n                                \"no_of_slots\": {\"type\": \"number\"},\n                                \"office\": {\"type\": \"number\"},\n                                \"start_time\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\", \"office\", \"start_time\"]\n                        }\n                    }\n                },\n            }\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"offices\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Office Schema\", function(){\n    pm.expect(tv4.validate(jsonData, allOfficeSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Video-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec8819b8-98ba-4594-b348-00b2283d4aef",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"video_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar videoSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"videofiles\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\"type\": \"string\"},\n                    \"date\": {\"type\": \"string\"},\n                    \"size\": {\"type\": \"string\"}\n                },\n                \"required\": [\"name\", \"date\", \"size\"]\n            }\n        },\n        \"manifest\": {\"type\": \"string\"},\n        \"errors\": {\"type\": \"string\"},\n        \"code\": {\"type\": \"number\"},\n        \"space\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"total\": {\"type\": \"number\"},\n                \"used\": {\"type\": \"number\"},\n                \"freespace\": {\"type\": \"number\"}\n            },\n            \"required\": [\"total\", \"used\", \"freespace\"]\n        }\n    },\n    \"required\": [\"videofiles\", \"manifest\", \"errors\", \"code\", \"space\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate the Videofiles Schema\", function(){\n    pm.expect(tv4.validate(jsonData, videoSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				}
			],
			"description": "This folder performs basic authentication features.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check app health",
			"item": [
				{
					"name": "Check healthz driver TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90d49a32-643e-4465-b9af-e248b94a3e62",
								"exec": [
									"//  Get the maximum response time allowed.",
									"max_load_time = JSON.parse(globals.max_load_time);",
									"",
									"//  Set health response time variable.",
									"health_tries = 15;",
									"counter = 1;",
									"postman.setEnvironmentVariable(\"health_tries\", JSON.stringify(health_tries));",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"}",
									"    ",
									"//  Response time is too long.  Try again, give pod a chance to spin up.",
									"else {",
									"    postman.setNextRequest(\"Check the healthz endpoint TheQ\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3575f97d-90af-4d35-8a50-e04c092b8d9e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the healthz endpoint TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d6c5a75-3b2e-4a03-9f79-c52d42c5b95b",
								"exec": [
									"//  Get the maximum load time allowed.",
									"max_load_time = JSON.parse(postman.getEnvironmentVariable(\"max_load_time\"));",
									"",
									"//  Get and update variables.",
									"health_tries = JSON.parse(postman.getEnvironmentVariable(\"health_tries\"));",
									"counter = JSON.parse(postman.getEnvironmentVariable(\"health_counter\")) + 1;",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"}",
									"    ",
									"//  Response time is too long.",
									"else {",
									"    ",
									"    //  You haven't reached your maximum tries yet.  Try again.",
									"    if (counter < health_tries) {",
									"        postman.setNextRequest(\"Check the healthz endpoint\");",
									"    }",
									"    ",
									"    //   You have reached the maximum.  An error, go to next test.",
									"    else {",
									"        pm.test(\"Response should be below \" + max_load_time.toString() + ' in ' + health_tries.toString() + ' tries.', function() {",
									"            pm.expect(counter).to.be.below(health_tries);",
									"        });",
									"        postman.setNextRequest(\"Check the readyz endpoint TheQ\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b042f78f-18d5-4b47-b723-f8b0466aaa48",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint TheQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7674b85-3605-480f-8520-3075a5c44e18",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is ready'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is ready');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f20e393-0407-43db-85fb-be4208a50b2a",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check user login",
			"item": [
				{
					"name": "Authenticate default QTxn user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d845e8f-10ee-4ec5-bdc1-f044e06d8be1",
								"exec": [
									"//  Do the basic checks.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to make sure that the access token field is not null",
									"pm.test(\"Access Token is not null\", function(){",
									"    var access_token = jsonData.access_token;",
									"    pm.expect(access_token).not.eql(null);",
									"});",
									"",
									"//Test to make sure that the refresh token response field is not null",
									"pm.test(\"Refresh Token is not null\", function(){",
									"    var refresh_token = jsonData.refresh_token;",
									"    pm.expect(refresh_token).not.eql(null);",
									"});",
									"",
									"//Test to make sure that expires in response field is not nullf",
									"pm.test(\"Expires In is not null\", function(){",
									"    var expires_in = jsonData.expires_in;",
									"    pm.expect(expires_in).not.eql(null);",
									"});",
									"",
									"//Test to make sure that refresh expires in response fiels is not null",
									"pm.test(\"Refresh Expires In is not null\", function(){",
									"    var refresh_expires_in = jsonData.refresh_expires_in;",
									"    pm.expect(refresh_expires_in).not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						},
						"description": "Make sure the operator ID can log in"
					},
					"response": []
				},
				{
					"name": "Who am I TheQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4769f696-8c11-4aba-8d4b-12c3b9942b40",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11f16c32-b305-4f6c-bc6c-879f0e3c1917",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, make sure schema is OK.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.csr_schema_check)",
									"",
									"//  Make sure the postman operator is a GA.",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"    role = jsonData.csr.role.role_code;",
									"}",
									"else {",
									"    role = \"Unknown\"",
									"};",
									"",
									"pm.test(\"The cfms-postman-operator role is \" + role + \", must be GA\", function() {",
									"    pm.expect(role).to.be.eql(\"GA\")",
									"});",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"\tcurrentCsrId = jsonData.csr.csr_id;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", currentCsrId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check channels",
			"item": [
				{
					"name": "Get channels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b8530989-d6b7-4947-a8e1-c97ac4e8bc53",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c4859312-ea3a-42b5-9293-5331b5cbd006",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"channel_name\" : {",
									"            \"type\" : \"string\"",
									"        },",
									"        \"channel_id\" : {",
									"            \"type\" : [\"number\", \"object\"]",
									"        }",
									"    },",
									"    \"required\" : [\"channel_name\", \"channel_id\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allChannels = jsonData.channels;",
									"var channelCount = 0;",
									"var phoneId = 0;",
									"var emailId = 0;",
									"var phoneText = \"Phone\";",
									"var emailText = \"Email/Fax/Mail\";",
									"allChannels.forEach(function(channel) {",
									"    channelCount ++;",
									"    var testTitle = \"Channel (\" + channelCount + \"): ID \" + channel.channel_id + \" Name \" + channel.channel_name + \" conforms to schema\";",
									"    tests[testTitle] = tv4.validate(channel, schema);",
									"    if (channel.channel_name === phoneText) {",
									"        phoneId = channel.channel_id;",
									"    }",
									"    if (channel.channel_name === emailText) {",
									"        emailId = channel.channel_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the phone ID.",
									"pm.test(phoneText + ' id was ' + phoneId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(phoneId).to.not.be.eql(0);",
									"});",
									"",
									"//  Check that you found the email ID.",
									"pm.test(emailText + ' id was ' + emailId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(emailId).to.not.be.eql(0);",
									"});",
									"",
									"//  Store this ID for future use.",
									"postman.setEnvironmentVariable(\"channel_telephone_id\", JSON.stringify(phoneId));",
									"postman.setEnvironmentVariable(\"channel_email_id\", JSON.stringify(emailId));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}channels/",
							"host": [
								"{{url}}channels"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check counters",
			"item": [
				{
					"name": "Store CSR and Office Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd4a4190-8857-4e87-ac32-f5f070399b36",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc916d1e-7a0b-44c4-b91d-f165bfa39c59",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, make sure schema is OK.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.csr_schema_check)",
									"",
									"//  Make sure that jsonData has an csr property.",
									"pm.test(\"Response should have csr property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"csr\")).to.be.true;",
									"});",
									"",
									"var csr = 0;",
									"var office = 0;",
									"var counters = 0;",
									"var counter_text = \"Counter\";",
									"var counter_id = 0;",
									"var qtxn_text = \"Quick Trans\";",
									"var qtxn_id = 0;",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", jsonData.csr.csr_id);",
									"    ",
									"    csr = jsonData.csr;",
									"    counter_id = 0;",
									"    qtxn_id = 0;",
									"",
									"    //  Make sure that jsonData has an booking property.",
									"    pm.test(\"CSR should have office property\", function(){",
									"        pm.expect(csr.hasOwnProperty(\"office\")).to.be.true;",
									"    });",
									"    ",
									"    //  Make sure office has counter property.",
									"    if (csr.hasOwnProperty(\"office\")) {",
									"        office = csr.office;",
									"        ",
									"        //  Make sure that jsonData has an booking property.",
									"        pm.test(\"Office should have counters property\", function(){",
									"            pm.expect(office.hasOwnProperty(\"counters\")).to.be.true;",
									"        });",
									"",
									"        //  Make sure office has counter property.",
									"        if (office.hasOwnProperty(\"counters\")) {",
									"            counters = office.counters;",
									"            ",
									"            //  Search for Counter and Quick Trans counters",
									"            counters.forEach(function(counter) {",
									"                if (counter.counter_name === counter_text) {",
									"                    counter_id = counter.counter_id;",
									"                }",
									"                if (counter.counter_name === qtxn_text) {",
									"                    qtxn_id = counter.counter_id;",
									"                }",
									"            });",
									"            ",
									"            //  Make sure you found the right IDs.",
									"            pm.test(\"Counter ID (\" + counter_id.toString() + \") should not be 0\", function(){",
									"                pm.expect(counter_id).to.not.be.eql(0);",
									"            });",
									"            pm.test(\"Quick Transaction ID (\" + qtxn_id.toString() + \") should not be 0\", function(){",
									"                pm.expect(qtxn_id).to.not.be.eql(0);",
									"            });",
									"            ",
									"            //  Store the ids for future use.",
									"            // postman.setEnvironmentVariable(\"counter_id\", counter_id);",
									"            // postman.setEnvironmentVariable(\"qtxn_id\", qtxn_id);",
									"            postman.setEnvironmentVariable(\"counter_id\", JSON.stringify(counter_id.toString()));",
									"            postman.setEnvironmentVariable(\"qtxn_id\", JSON.stringify(qtxn_id.toString()));",
									"        }",
									"",
									"        ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check categories",
			"item": [
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73b74d5a-91fa-45b2-976b-9525dbf93a3f",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c836c81-c08e-437c-bd4a-7ff9389c316a",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\" : {",
									"        \"actual_service_ind\" : { \"type\" : \"number\" },",
									"        \"deleted\" : { \"type\" : [\"string\", \"null\"] },",
									"        \"display_dashboard_ind\" : { \"type\" : \"number\" },",
									"        \"external_service_name\": {\"type\": [\"null\", \"string\"]},",
									"        \"online_availability\" : {\"type\": [\"null\", \"string\"]},",
									"        \"online_link\": {\"type\": [\"null\", \"string\"]},",
									"        \"parent\": {\"type\": \"null\"},",
									"        \"parent_id\": {\"type\": \"null\"},",
									"        \"prefix\" : {\"type\" : \"string\"},",
									"        \"service_code\" : {\"type\" : \"string\"},",
									"        \"service_desc\" : {\"type\" : \"string\"},",
									"        \"service_id\" : {\"type\" : [\"number\", \"object\"]},",
									"        \"service_name\" : {\"type\" : \"string\"},",
									"        \"timeslot_duration\": {\"type\": [\"null\", \"number\"]}",
									"    },",
									"    \"required\" : [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\", \"external_service_name\",",
									"                  \"online_availability\", \"online_link\", \"parent\", \"parent_id\", \"prefix\", \"service_code\",",
									"                   \"service_desc\", \"service_id\", \"service_name\",",
									"                   \"timeslot_duration\"]",
									"};",
									"",
									"//  Loop to validate schema of each channel.",
									"var allCategories = jsonData.categories;",
									"var categoryCount = 0;",
									"allCategories.forEach(function(category) {",
									"    categoryCount ++;",
									"    var testTitle = \"Category (\" + categoryCount + \"): \" + category.service_name + \" - \";",
									"    tests[testTitle + \"conforms to schema\"] = tv4.validate(category, schema);",
									"    var displayInd = category.display_dashboard_ind;",
									"    var serviceInd = category.actual_service_ind;",
									"",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"display_dashboard_ind must be 0 (is \" + displayInd.toString() + \")\", function(){",
									"        pm.expect(displayInd).to.be.eql(0);",
									"    });",
									"",
									"    pm.test(\"--> \" + testTitle + \"actual_service_ind must be 0 (is \" + serviceInd.toString() + \")\", function(){",
									"        pm.expect(serviceInd).to.be.eql(0);",
									"    });",
									"    ",
									"    pm.test(\"--> \" + testTitle + \"parent_id must be null\", function(){",
									"        pm.expect(category.parent_id).to.be.null;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}categories/",
							"host": [
								"{{url}}categories"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check services",
			"item": [
				{
					"name": "Get services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9ae7b27-43e5-43a1-8ec4-04d7dff910f6",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1167ebe9-9abb-40aa-b503-bc4daa51aaf7",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.service_schema_check);",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name + \" - \";",
									"    displayInd = element.display_dashboard_ind;",
									"    serviceInd = element.actual_service_ind;",
									"",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"display_dashboard_ind must be 0 or 1 (is \" + displayInd.toString() + \")\", function(){",
									"        pm.expect(displayInd).to.be.within(0, 1);",
									"    });",
									"",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"actual_service_ind must be 1 (is \" + serviceInd.toString() + \")\", function(){",
									"        pm.expect(serviceInd).to.be.eql(1);",
									"    });",
									"    ",
									"    //  Test that returned data is valid.",
									"    pm.test(\"--> \" + testTitle + \"parent_id must not be null\", function(){",
									"        pm.expect(element.parent_id).to.not.be.null;",
									"    });",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"var mspText = \"Payment - MSP\";",
									"var propTaxText = \"Other - PTAX\";",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === mspText) {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === propTaxText) {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the MSP service.",
									"pm.test(mspText + ' id was ' + mspId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(mspId).to.not.be.eql(0);",
									"});",
									"",
									"//  Check that you found the Property Tax service.",
									"pm.test(propTaxText + ' id was ' + taxId.toString() + ' (should not equal 0)', function() {",
									"    pm.expect(taxId).to.not.be.eql(0);",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update quick lists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "46a6328a-d793-4941-b302-efbe1ad7f66c",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7f048e1-6676-4a07-ad06-0cb973821c83",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, make sure schema is OK.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.office_schema_check)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}services/refresh/?office_id={{current_office_id}}",
							"host": [
								"{{url}}services"
							],
							"path": [
								"refresh",
								""
							],
							"query": [
								{
									"key": "office_id",
									"value": "{{current_office_id}}"
								}
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check smartboard",
			"item": [
				{
					"name": "Get smartboard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8a3b7b11-9060-4e12-97ae-5ff6f966d674",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a3324cbd-37ce-44ad-85e9-7c20ff59cf7e",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Define the JSON Schema expected in response",
									"var smartboardSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"office_type\": {\"type\": \"string\"},",
									"        \"citizens\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"ticket_number\": {\"type\": \"string\"},",
									"                    \"active_period\": {",
									"                        \"type\": \"object\",",
									"                        \"properties\": {",
									"                            \"period_id\": {\"type\": \"number\"},",
									"                            \"ps\": {",
									"                                \"type\": \"object\",",
									"                                \"properties\": {",
									"                                    \"ps_name\": \"string\"",
									"                                },",
									"                                \"required\": [\"ps_name\"]",
									"                            },",
									"                            \"ps_id\": {\"type\": \"number\"},",
									"                            \"time_end\": {\"type\": [\"null\", \"string\"]},",
									"                            \"time_start\": {\"type\": \"string\"}",
									"                        },",
									"                        \"required\": [\"period_id\", \"ps\", \"ps_id\", \"time_end\", \"time_start\"]",
									"                    },",
									"                },",
									"                \"required\": [\"ticket_number\", \"active_period\"]",
									"            },",
									"        },",
									"    },",
									"    \"required\": [\"office_type\", \"citizens\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate the Smartboard Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, smartboardSchema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}smartboard/?office_number={{current_office_number}}",
							"host": [
								"{{url}}smartboard"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check videofiles",
			"item": [
				{
					"name": "Get videofiles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6267135c-8287-4dd1-809a-730ee5bfe630",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6de00546-c3db-4d91-b6d5-191c95fe24f0",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, make sure schema is OK.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.video_schema_check)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}videofiles/",
							"host": [
								"{{url}}videofiles"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get videofiles for office",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60d2fba3-aed3-417a-a3aa-3ceb022b4e79",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21ce2651-192d-47ec-b408-59310b7007df",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, make sure schema is OK.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.video_schema_check)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}videofiles/?office_number={{current_office_number}}",
							"host": [
								"{{url}}videofiles"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "office_number",
									"value": "{{current_office_number}}"
								}
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check CSRs and States",
			"item": [
				{
					"name": "Get CSRs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1bb3b95-03e9-428e-aae9-c349fbac8a41",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9fca29f1-b12c-449a-b3e0-40d8cb90e535",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, make sure schema is OK.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.manycsrs_schema_check)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}csrs/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Check Postman Finance No",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cec126e-8bce-42d5-9fd6-b56d92f0efb7",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "871caace-05b8-483a-91ff-efecfbccb1b1",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.onecsr_schema_check);",
									"",
									"//  Make sure the CSR is not a finance designate.",
									"var finance = jsonData.csr.finance_designate;",
									"pm.test(\"Finance designate is \" + finance.toString() + \" - it should be 0\", function() {",
									"    pm.expect(finance).to.be.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"finance_designate\": 0\r\n}"
						},
						"url": {
							"raw": "{{url}}csrs/{{current_csr_id}}/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"{{current_csr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Check Postman Finance Yes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "771c3ded-afa4-4440-b2d0-05d8ea7fda52",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34112a77-642f-4b72-84d1-e74ce8dd11e3",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.onecsr_schema_check);",
									"",
									"//  Make sure the CSR is a finance designate.",
									"var finance = jsonData.csr.finance_designate;",
									"pm.test(\"Finance designate is \" + finance.toString() + \" - it should now be 1\", function() {",
									"    pm.expect(finance).to.be.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"finance_designate\": 1\r\n}"
						},
						"url": {
							"raw": "{{url}}csrs/{{current_csr_id}}/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"{{current_csr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get CSR states",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea9151b8-1605-4500-9302-3491ed602a38",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e6ae6129-3053-4d00-b1b3-9d4edc0a0261",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Define the JSON Schema expected in response",
									"var csrStateSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"csr_states\" : {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"csr_state_desc\": {\"type\": \"string\"},",
									"                    \"csr_state_id\": {\"type\": \"number\"},",
									"                    \"csr_state_name\": {\"type\": \"string\"},",
									"                },",
									"                \"required\": [\"csr_state_desc\", \"csr_state_id\", \"csr_state_name\"]",
									"            }",
									"        },",
									"        \"errors\": {\"type\": [\"object\", \"string\"]}",
									"    },",
									"    \"required\": [\"csr_states\", \"errors\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate CSR States Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, csrStateSchema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}csr_states/",
							"host": [
								"{{url}}csr_states"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clear queue for tests",
			"item": [
				{
					"name": "Delete citizen queue driver",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4278d4a3-758b-4d47-acfc-aebca7f68e9e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db36091a-738c-4853-8fbb-d130c265addf",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Delete citizens, if there are any.",
									"    if (citizenIds.length > 0) {",
									"        ",
									"        //  Set the current_client, to be deleted.",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(citizenIds));",
									"    ",
									"        if (currentCitizen.service_reqs.length === 0) {",
									"            postman.setNextRequest(\"Next citizen left\");",
									"            // //  Temporary kludge.  Citizen left not working, so add SR, then delete.",
									"            // postman.setNextRequest(\"Temporary add MSP service request\");",
									"        }",
									"        else {",
									"            postman.setNextRequest(\"Next citizen finish service\");",
									"        }",
									"    }",
									"    ",
									"    //  No more citizens.  Clear the current, queue variables.",
									"    else {",
									"        postman.setEnvironmentVariable(\"current_client\", JSON.stringify(\"\"));",
									"        postman.setEnvironmentVariable(\"current_queue\", JSON.stringify(\"\"));",
									"        postman.setNextRequest(\"End clear queue via healthz endpoint\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Next citizen finish service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "25c8cccc-dafe-4b5c-a4dd-6967525132a2",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4aef770c-ab2a-4f9e-a3dd-8b2976732b57",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"var citizenToBeDeleted = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"var citizenData = jsonData.citizen;",
									"var testTitle = \"Check citizen finish service\";",
									"",
									"//  Make sure the response is valid.",
									"pm.test(testTitle + \": Response should have property 'citizen'\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"citizen\")).to.be.true;",
									"});",
									"pm.test(testTitle + \": Response should not have property 'message' indicating an error\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"message\")).to.be.false;",
									"});",
									"pm.test(testTitle + \": Citizen marked as finished should be citizen \" + citizenToBeDeleted.toString(), function(){",
									"    pm.expect(citizenData.citizen_id).to.be.eql(citizenToBeDeleted);",
									"});",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Next citizen citizen left",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cc2a280-c643-46fa-aa93-1143be40bc3e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcfe06a4-b175-4d6e-80fe-51c218fde47b",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform checks.",
									"    pm.test(\"Check there are no citizens waiting\", function(){",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test(\"Citizen that left must be \" + currentCitizen.citizen_id.toString() + \" (is \" + currentCitizenId.toString(), function(){",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"}",
									"",
									"//  Go back to the delete citizen queue driver.",
									"postman.setNextRequest(\"Delete citizen queue driver\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Temporary add MSP service request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da614ab4-f08a-440d-b70f-2eddbcf52d88",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3fca865a-2003-4fec-9933-d813149f86a7",
								"exec": [
									"//  Run create tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"var svcReq = jsonData.service_request;",
									"",
									"//  Run service request tests.",
									"eval(environment.one_service_request_test);",
									"",
									"//  Make sure the response is valid.",
									"pm.test(\"Response has service_request property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"service_request\")).to.be.true;",
									"});",
									"pm.test(\"Response has errors property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"errors\")).to.be.true;",
									"});",
									"",
									"//  Go back to the clear citizen driver.",
									"postman.setNextRequest(\"Next citizen finish service\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : 1,\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "End clear queue via healthz endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57bc59ab-51e1-471b-b8dd-64e9d8cb72fe",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is healthy'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d95df1b-551d-46e0-9ded-7f1ff1d1dbbc",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check citizen through queue (QT1)",
			"item": [
				{
					"name": "Check no citizens (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f209b1c6-edb4-425d-9799-ff91d007f635",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb0a21e-2e53-499a-85a9-1191d10c36db",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9ce04908-8b0f-43df-bc90-03b80d66ed9d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b32f31bf-050c-479e-bfdb-cbfe9fbf6a5e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"    ",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "454f6927-0083-4f41-a00f-93c51c012ffb",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb886009-3fba-4314-b034-bed96eb7d77e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d40ef720-b129-4221-a62b-6eb1d48eefdf",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80ba0f58-110b-429e-80fb-bcec53a68d38",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									"",
									"//  Get the SR ID.",
									"if (jsonData.hasOwnProperty(\"service_request\")) {",
									"\tcurrentSrId = jsonData.service_request.sr_id;",
									"}",
									"else {",
									"    currentSrId = 0;",
									"}",
									"",
									"//  The service request ID must not be 0.",
									"pm.test(\"The Service Request ID is \" + currentSrId.toString() + \", must not be 0\", function() {",
									"    pm.expect(currentSrId).to.not.be.eql(0)",
									"});",
									"",
									"//  Save the service request ID.",
									"postman.setEnvironmentVariable(\"first_sr_id\", currentSrId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e85de250-7178-4e48-aa73-7791f6bd4124",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "39acab07-6401-46a7-ae8e-8cdea9a33b4e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add citizen to queue (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27f522b2-cebc-4ca9-bd94-938ea0ef13f4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6520284b-4b98-44e4-802d-eda1450e9820",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite specific citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c73cb57-43c2-45f3-a40f-e46e5ecf4cca",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "330d6c84-2b54-43b4-94ca-521a70f3c7d0",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Invited\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Invited\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34cdf686-9d5d-48a0-b912-912455f5608d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6d8c828-987c-4e47-b453-e64322dc35f4",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (now four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add MSP via email service request (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "46dd299e-967d-4368-add0-1426fd1a78ab",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce2b3b46-2bf9-4252-ac1d-20b931f1eb86",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_email_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Activate property tax service (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c57ebcc6-bfa1-4436-a1f8-a9aef5e36250",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "433e7a95-1663-47f2-b258-ac710bba8b9e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get the current service request ID.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									"",
									"if (jsonData.hasOwnProperty(\"service_request\")) {",
									"\tcurrentSrId = jsonData.service_request.sr_id;",
									"}",
									"else {",
									"    currentSrId = 0;",
									"}",
									"",
									"//  Get the first service request ID.",
									"first_id = JSON.parse(postman.getEnvironmentVariable(\"first_sr_id\"));",
									"",
									"//  The service request ID must not be 0.",
									"pm.test(\"The Service Request ID is \" + currentSrId.toString() + \", must be \" + first_id.toString(), function() {",
									"    pm.expect(currentSrId).to.be.eql(first_id)",
									"});",
									"",
									"//  Save the service request ID.",
									"postman.setEnvironmentVariable(\"second_sr_id\", currentSrId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}service_requests/{{first_sr_id}}/activate/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{first_sr_id}}",
								"activate",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen (QT1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfcef6f5-2004-4012-ae55-953305223c30",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edabc9a1-7710-4935-ac63-45ff2c35ad85",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizens in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be two service requests', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(2);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 5 (five periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(5);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check citizen begin-hold-finish (QT2)",
			"item": [
				{
					"name": "Check no citizens (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39996fe0-ff98-480c-9836-fb938b523a65",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5831f0be-f971-4684-83e9-be3a6d184ae1",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eac26a23-3858-4186-9e37-e2286a530c59",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11f28e0a-cdfb-4875-967b-54f863204366",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"    ",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b43f60b9-6e48-4a27-b379-1e09742f43be",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b02c3f5-3288-42a4-af0d-ca03983d796c",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a925a1f-6680-4c3f-b952-c71c830fe284",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e5a08dd4-1468-4bdc-a606-2daf96ff8d93",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23c6aeb4-d4fe-496c-9ec3-fe1a582b43cf",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f236a844-515d-4367-8b36-bd4bd1d70ca5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b47523db-ad63-4588-a92a-27a7fa557f4d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57fcf633-f967-4690-9eb8-bd1550727d90",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Place citizen on hold (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af4907be-d7d8-4c76-bee9-0b51dc4b85da",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5adb138-e99e-4f8a-8d03-4579637f93fb",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"On hold\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"On hold\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/place_on_hold/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"place_on_hold",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Get service requests (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cfe328f9-42cd-48f5-83f8-b68fcee4ba19",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2285c8ed-1174-41b3-99c2-b617c6c94497",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_request_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get periods for the first service request.",
									"    var allPeriods = allElements[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    var allPeriodCount = 0;",
									"",
									"    //  Find how many periods there are with null end time.",
									"    //  Also, check schema.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        ",
									"        //  Find the open period.",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"        ",
									"    });",
									"}    ",
									"",
									"//  If there are some service requests, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Perform tests.",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(allElements.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(allElements[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(allElements[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(allElements[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have three periods', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period state must be \"On hold\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"On hold\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/service_requests/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"service_requests",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Call citizen from hold (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9812f9f4-9f3d-4593-b1ce-ab56c56de5ae",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a6db1cf-9e98-4e11-93d1-ec31b0d57627",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (now four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen (QT2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "612a8631-69ae-46d9-8664-bcb90a42dc47",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "206c834c-dc06-4545-bd0d-65bb24f823b0",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = allElements[0].service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizens in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (still four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check citizen leave after create (QT3)",
			"item": [
				{
					"name": "Check no citizens (QT3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83aa6cd9-740a-44f0-aec6-d451ebb1937d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83154f73-1131-4edd-9d15-a560f29d0892",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2f42430-f884-4dc0-ac6b-feea2766c5a4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "916d41ec-d178-4759-9f54-797ffbefe67d",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Citizen left (QT3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9adf14db-64d8-43ed-b3cd-a4923f392fc2",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "699fa33f-f1c2-4b67-bee9-49c18cd115fe",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"    var citizenComment = postman.getEnvironmentVariable(\"citizen_comment\");",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = null;",
									"    if (currentCitizen.service_reqs.length !== 0) {",
									"        var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    }",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    if (allPeriods !== null) {",
									"        allPeriods.forEach(function(onePeriod) {",
									"            if (!onePeriod.time_end) {",
									"                openPeriod = onePeriod;",
									"                openPeriodCount++;",
									"            }",
									"        });",
									"    }",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be no active citizens in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check citizen leave after waiting (QT4)",
			"item": [
				{
					"name": "Check no citizens (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1164e38c-bd12-476f-a468-6df6be81c23c",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6072d3e-e7b4-490b-aa53-d5f0c3ceeddc",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e43d1a1-fd49-4d25-bf52-7fa673696306",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1695274-7e59-4d87-a19c-efe83e4a1662",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dad91e4d-2f4e-4f95-bfcf-a4f1c1b0ce75",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// }",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0f965763-5e56-4495-909b-296b0b2571c6",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"     pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b7ba7f1-ec85-4678-ad1a-a8c454024b96",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "983c7cf6-5dfb-412d-b0e8-c5de0337f77b",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21bccdfb-0f91-4972-b318-26baaacf9fb4",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "807b7bc0-f004-4ef6-8106-9c61b002929f",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add citizen to queue (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2bc38bf-637a-4d3f-a521-a33f62b28f0d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f858bb75-abb4-4bf7-a12e-8c6c17f629a4",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Citizen left (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1309e6e-a8df-43b7-9035-8fb3250b5cd2",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0b0d076-a946-4668-a6df-af608aca694a",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be no active citizens in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test(\"Citizen should have one service request\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Check no citizens (QT4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5fd8db7a-8c99-4428-b70a-070900e43ab1",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb4e767f-1642-4652-b6a1-fd39b5609f55",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check update service information (QT5)",
			"item": [
				{
					"name": "Check no citizens (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9706acc6-36ef-4236-9e83-8592ef7026bf",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2ad6107-67a3-4fd4-b92c-afc85892e588",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var allOK = true;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Make sure it had a length of 0.",
									"    if (allElements.length !== 0) {",
									"        allOK = false;",
									"    }",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(allOK).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Create citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "935251ab-fdd1-4661-85ca-c405ad5c40d6",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "af56b9d1-cc31-4d27-a628-3e9a41e64c5d",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should be in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"current_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Edit specific citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "497d28f8-31ab-47c8-b149-8f1db61cdd89",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments",
									"// };",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "610b8dce-5e3d-461a-9436-d306e5a3affa",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"     pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Add property tax via phone service request (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a308cb8e-54e2-4f0a-8140-8712122a5825",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ee33792-62ed-4966-a945-28906778eed9",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{current_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "List specific citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d9b928a-6cba-4f56-be71-55cd7e829baf",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51fd1599-4228-4384-803f-91126da67c70",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"    ",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"",
									"    //  Save the service request ID for later.",
									"    var mySRId = allElements[0].service_reqs[0].sr_id;",
									"    postman.setEnvironmentVariable(\"current_sr_id\", JSON.stringify(mySRId));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Begin serving citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a908925-ce65-4076-803b-2d3517903e13",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0b5e304-54b2-4149-b713-8a07888370fd",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update quantity from 3 to 5 (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df054d68-a3bc-48e8-adbc-bef05114bbfb",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4fac3ea6-3d15-417f-8097-8bd5af7e675a",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_request_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Updated service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(allElements[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : {{citizen_quantity_update}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Update service from PropTax to MSP (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3643530-b3ce-46c1-b4ab-70f2d6f8668a",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca9c6fdf-2432-484e-9919-0bfe5cf76530",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.service_request_test);",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Only check for an updated quantity.  Get environment variables.",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Updated service request service must be ' + citizenService, function() {",
									"        pm.expect(allElements[0].service_id).to.be.eql(citizenService);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_id\" : {{service_MSP_id}}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/{{current_sr_id}}/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								"{{current_sr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Finish serving citizen (QT5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3396da61-4e70-46d3-9a4c-ba3059d26c03",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cecfe6a6-e2c0-4671-af2b-76f8400300f7",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"current_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizens in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (should be two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check pick qtxn customer (QT6)",
			"item": [
				{
					"name": "Check no citizens (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e848b03-0d95-4ef1-8da9-4030890ad948",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7374d1f6-8c56-45d9-b5e6-70141cc94f82",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(citizenCount).to.be.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Create (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7489c8fd-3e52-4769-8e1d-f864aeb73c95",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2a90fce-7386-4ccf-b3a5-3b1cddb72a17",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should have been created\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"first_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Edit (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e477ada-521a-4bbf-b84c-d5ab036dc4bb",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa7dcc6f-f15b-43e9-9441-354956eaaf28",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be one active citizen in the office\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}},\n    \"counter_id\": {{counter_id}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Prop Tax via phone (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8458271-de02-4e0f-ac7b-61320eddf02d",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0db4b500-d4cd-45d6-a4b6-65fc79d0e95e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{first_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - List (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aafe1e76-b85d-4705-8a30-79413dc76336",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed3416f4-ff8b-4fdb-87fc-fce766a4de7a",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Add to queue (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cbdfed8-f9d1-443e-a45a-da41ea8f3df1",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8583f97b-21f2-4854-95bf-0a545a3205e1",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one active citizen in the office', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Create (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9688684f-e482-43f2-8f6b-eaf6f438038e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3496c50f-6de6-499b-a689-82b6771cddc5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should have been created\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"second_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Edit QTxn (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8986eef4-207e-40ea-8b23-cfa1ca4379cb",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"// //  Get data, create JSON body.",
									"// var citizenName = postman.getEnvironmentVariable(\"citizen_name_quick\");",
									"// var citizenComments = postman.getEnvironmentVariable(\"citizen_comment_quick\");",
									"// var bodyData = {",
									"//     \"citizen_name\" : citizenName,",
									"//     \"citizen_comments\" : citizenComments,",
									"//     \"qt_xn_citizen_ind\" : 1",
									"// };",
									"",
									"// //  Store the data in an environment variable.",
									"// postman.setEnvironmentVariable(\"putBody\", JSON.stringify(bodyData));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "747b06bd-abc8-4435-b97a-b5ee3a073a5d",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Should be updating single citizen\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name_quick}},\n    \"citizen_comments\" : {{citizen_comment_quick}},\n    \"qt_xn_citizen_ind\" : 1,\n    \"counter_id\": {{qtxn_id}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - MSP via email (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99008457-dd82-49c8-9df5-bbd442672790",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "247ab371-4b49-4c9b-815d-452fad8415ac",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{second_client}},\n\t\t\"quantity\" : {{citizen_quantity_update}},\n\t\t\"channel_id\" : {{channel_email_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - List (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9972b962-dad4-4c91-8e82-b537f4bf7a92",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8fa7d09e-878b-47b4-a95e-12c60c548065",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Should be updating one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Add to queue (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "46a6f342-fea7-4b2c-b258-cb7fd1a5b209",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14074aa4-3034-43b7-bd74-be3f82e8bec2",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Should be adding one citizen to the queue', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Check 2 citizens in queue (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3867b1c-d52f-4b32-9169-6c7f3e4af258",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee60f82c-0b58-4605-a7f1-8281f0e00885",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"pm.test('Must be two active citizens in the office', function() {",
									"    pm.expect(citizenCount).to.be.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Set CSR to QTxn (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df0e0702-df42-4087-8389-c60c9f2717be",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Turn the qtxn ID from character to number.",
									"qtxn_id_number = JSON.parse(environment.qtxn_id);",
									"postman.setEnvironmentVariable(\"qtxn_id_number\", qtxn_id_number);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9a91fc-9cbc-44e2-a723-8e10d22243de",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body, test the schema",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.onecsr_schema_check)",
									"",
									"//  Ensure the CSR is now set to take quick transactions.",
									"csrType = jsonData.csr.counter;",
									"csrNeed = JSON.parse(environment.qtxn_id_number);",
									"pm.test('CSR counter type is ' + csrType.toString() + '; must be ' + csrNeed.toString(), function() {",
									"    pm.expect(csrType).to.be.eql(csrNeed);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"counter_id\": {{qtxn_id_number}}\n}"
						},
						"url": {
							"raw": "{{url}}csrs/{{current_csr_id}}/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"{{current_csr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite next citizen - should be second one (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4788893-cb15-46ba-870c-9cfcc946f7da",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d8f01fd5-ab21-4524-a4e9-7bf2e939b4e5",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Should only be inviting one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Invited\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Invited\");",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - begin serving (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e2c763b-1cdf-483b-976b-a56ec98de91f",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "241103ec-0715-4e13-8df3-2e3b5b5480ef",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one citizen being served', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (now four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - finish serving (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53387d0d-5ac5-448a-a8e3-2f31847267a8",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47ed5274-748f-49ee-ac1c-81ccbb973983",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizen being served', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (still four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite next citizen - should be first one (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d0be4749-a54b-4194-94b3-88bc67503d2c",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f0c36d5e-237c-46ab-be35-b5bed4663190",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Should only be inviting one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Invited\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Invited\");",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - citizen left (QT6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f750fa30-8a4d-47e8-b4b3-00ae63911919",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f553c49f-4f8f-4748-898a-209553870f31",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be no active citizen being served\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test(\"Citizen should have one service request\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check pick non-qtxn customer (QT7)",
			"item": [
				{
					"name": "Check no citizens (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "25c90ea7-d6a5-4c94-965d-efba64fe17b8",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fcf5cac5-d6ec-4c74-9afa-00e00130fd1e",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"pm.test(\"There should be no citizens in the office\", function() {",
									"    pm.expect(citizenCount).to.be.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Create (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aae2b587-f7da-4cae-8bc7-53b6e3e10a21",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d51492a5-6eb0-4591-9650-290bccd5a1cb",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should have been created\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"first_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Edit QTxn (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78ab3278-dbd8-4d99-9a59-7990fd760455",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cdf36118-b460-4bad-8c43-430ea4a8b0aa",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be editing only one citizen\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name_quick}},\n    \"citizen_comments\" : {{citizen_comment_quick}},\n    \"qt_xn_citizen_ind\" : 1,\n    \"counter_id\": {{qtxn_id}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - MSP via email (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67670e60-f310-448d-b417-201651dc3cb6",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc3159c8-120a-46a0-8518-486c0bb4f5ca",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_MSP_id}},\n\t\t\"citizen_id\" : {{first_client}},\n\t\t\"quantity\" : {{citizen_quantity_update}},\n\t\t\"channel_id\" : {{channel_email_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - List (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "037e8e82-228a-4783-a567-37bbae8824e6",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7709a507-2f50-4706-b7d9-29beaec0ccb8",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be editing only one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - Add to queue (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55775b52-71fb-4714-91ab-4781a94073b7",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0bcb7e0f-ffab-4779-8f6a-37ff1ff354f0",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be adding only one citizen to the queue', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{first_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{first_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Create (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60dfa878-c701-43d1-bf89-5230dd247915",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "da7c40bd-ba94-4930-9981-74370304ca06",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Only one citizen should have been created\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test(\"Current citizen name should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.null;",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"",
									"    //  Store the ID of the citizen just created.",
									"    postman.setEnvironmentVariable(\"second_client\", JSON.stringify(citizenIds.shift()));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Edit (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac1fd806-57b7-494d-b869-fc29f2326a19",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a051810-08fd-4297-9e9b-4880e864dd5b",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Should be updating single citizen\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test(\"Citizen should have no service requests\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"citizen_name\" : {{citizen_name}},\n    \"citizen_comments\" : {{citizen_comment}},\n    \"counter_id\": {{counter_id}}\n}"
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Prop Tax via phone (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cdef3804-311c-4657-9516-797dba573754",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54900b18-b828-4d68-88e9-e39eb7bad421",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.create_response_test);",
									"",
									"//  Get the current service request, check schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.one_service_request_test);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"service_request\" : {\n\t\t\"service_id\" : {{service_PropTax_id}},\n\t\t\"citizen_id\" : {{second_client}},\n\t\t\"quantity\" : {{citizen_quantity}},\n\t\t\"channel_id\" : {{channel_telephone_id}}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}service_requests/",
							"host": [
								"{{url}}service_requests"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - List (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11148693-33bf-4188-9cf2-e0c3d455a3c7",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea28f464-c9ca-49a5-bb5e-ed1cf1286960",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"",
									"    //  Perform tests.",
									"    pm.test('Should be updating one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request must have one period', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request period channel must be ' + citizenChannel, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].channel_id).to.be.eql(citizenChannel);",
									"    });",
									"    pm.test('Service request period state must be \"Ticket Creation\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].periods[0].ps.ps_name).to.be.eql(\"Ticket Creation\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - Add to queue (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d011d2f-d3dc-4672-94aa-61f45f2e6aa9",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f173618-9058-4d13-b0e6-01370a0c6522",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Should be adding one citizen to the queue', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Pending\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Pending\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 2 (now two periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(2);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Waiting\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Waiting\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{second_client}}/add_to_queue/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{second_client}}",
								"add_to_queue",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Check 2 citizens in queue (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b255f52-98a0-4107-b740-99c8c6972ee9",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24187b14-aabf-483f-885c-5847e4a8b0f6",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"var citizenCount = 0;",
									"",
									"//  If citizen property was present.",
									"if (allElements !== null) {",
									"",
									"    //  Get number of citizens in the queue.",
									"    citizenCount = allElements.length;",
									"}",
									"",
									"pm.test('Must be two active citizens in the office', function() {",
									"    pm.expect(citizenCount).to.be.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}citizens/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Set CSR to Counter (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b87744be-b5e9-4982-b7b6-c9b6772ebe89",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									"",
									"//  Turn the qtxn ID from character to number.",
									"counter_id_number = JSON.parse(environment.counter_id);",
									"postman.setEnvironmentVariable(\"counter_id_number\", counter_id_number);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "76aab341-ff70-4cb7-a3d3-aa59e22ec55e",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body, test the schema",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.onecsr_schema_check)",
									"",
									"//  Ensure the CSR is now set to take quick transactions.",
									"csrType = jsonData.csr.counter;",
									"csrNeed = JSON.parse(environment.counter_id_number);",
									"pm.test('CSR counter type is ' + csrType.toString() + '; must be ' + csrNeed.toString(), function() {",
									"    pm.expect(csrType).to.be.eql(csrNeed);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"counter_id\": {{counter_id_number}}\n}"
						},
						"url": {
							"raw": "{{url}}csrs/{{current_csr_id}}/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"{{current_csr_id}}",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite next citizen - should be second one (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8576dc7-5d04-4ed1-8f48-e18ba50bde0b",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "076cbd20-7531-4f5b-9018-54f23710287c",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Should only be inviting one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Invited\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Invited\");",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - begin serving (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff838e17-469a-4edb-bc88-464509b90215",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6274b810-4d4b-45ee-b15c-8174ef95b068",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be one citizen being served', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (now four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Being Served\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Being Served\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/begin_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"begin_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Second citizen - finish serving (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "022ce6cf-eb9e-4e3a-93f5-60fa97ba1fc5",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e241404-2615-402d-ab9c-49e813941924",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_PropTax_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_telephone_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"second_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Must be no active citizen being served', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must be null on service completion', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(null);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 4 (still four periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(4);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/finish_service/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"finish_service",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "Invite next citizen - should be first one (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86c2a388-8c6f-410e-8683-76baf13fbac1",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35936d60-190f-42d4-94ee-a6b6bdda0d73",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = null;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Run citizen tests.",
									"    eval(environment.get_active_citizens_test);",
									"    ",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test('Should only be inviting one citizen', function() {",
									"        pm.expect(citizenIds.length).to.be.eql(1);",
									"    });",
									"    pm.test('Citizen Id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test('Citizen comment must equal \"' + citizenComment + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.eql(citizenComment);",
									"    });",
									"    pm.test('There must be only one service request', function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Active\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Active\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must only be one open period', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(1);",
									"    });",
									"    pm.test('The open period state must be \"Invited\"', function() {",
									"        pm.expect(openPeriod.ps.ps_name).to.be.eql(\"Invited\");",
									"    });",
									"}",
									"",
									"//  Store the ID of the citizen just invited.",
									"postman.setEnvironmentVariable(\"current_client\", JSON.stringify(currentCitizenId));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/invite/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"invite",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				},
				{
					"name": "First citizen - citizen left (QT7)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7f2c4ad-1a35-4355-bd84-066964f7b723",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_script);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6e0fde1-92cb-45c7-8639-c5f957b65236",
								"exec": [
									"//  Run complex tests.",
									"eval(environment.complex_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Run citizen tests.",
									"eval(environment.citizen_response_test);",
									"",
									"//  Declare, initialize variables.",
									"var citizenIds = [];",
									"var currentCitizen = jsonData.citizen;",
									"",
									"//  If there are some citizens, proceed with tests.",
									"if (allElements !== null) {",
									"",
									"    //  Get environment variables.",
									"    var citizenName = JSON.parse(postman.getEnvironmentVariable(\"citizen_name_quick\"));",
									"    var citizenComment = JSON.parse(postman.getEnvironmentVariable(\"citizen_comment_quick\"));",
									"    var citizenService = JSON.parse(postman.getEnvironmentVariable(\"service_MSP_id\"));",
									"    var citizenQuantity = JSON.parse(postman.getEnvironmentVariable(\"citizen_quantity_update\"));",
									"    var citizenChannel = JSON.parse(postman.getEnvironmentVariable(\"channel_email_id\"));",
									"    var currentCitizenId = JSON.parse(postman.getEnvironmentVariable(\"first_client\"));",
									"    var allPeriods = currentCitizen.service_reqs[0].periods;",
									"    var openPeriod = null;",
									"    var openPeriodCount = 0;",
									"    ",
									"    //  Find how many periods there are with null end time.",
									"    allPeriods.forEach(function(onePeriod) {",
									"        if (!onePeriod.time_end) {",
									"            openPeriod = onePeriod;",
									"            openPeriodCount++;",
									"        }",
									"    });",
									"",
									"    //  Perform tests.",
									"    pm.test(\"Must be no active citizen being served\", function() {",
									"        pm.expect(citizenIds.length).to.be.eql(0);",
									"    });",
									"    pm.test('Citizen name must equal \"' + citizenName + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_name).to.be.eql(citizenName);",
									"    });",
									"    pm.test(\"Current citizen comments should be null\", function() {",
									"        pm.expect(currentCitizen.citizen_comments).to.be.null;",
									"    });",
									"    pm.test('Citizen id must equal \"' + currentCitizenId + '\"', function() {",
									"        pm.expect(currentCitizen.citizen_id).to.be.eql(currentCitizenId);",
									"    });",
									"    pm.test(\"Citizen should have one service request\", function() {",
									"        pm.expect(currentCitizen.service_reqs.length).to.be.eql(1);",
									"    });",
									"    pm.test('Service request state must be \"Complete\"', function() {",
									"        pm.expect(currentCitizen.service_reqs[0].sr_state.sr_code).to.be.eql(\"Complete\");",
									"    });",
									"    pm.test('Service request service must be ' + citizenService, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].service_id).to.be.eql(citizenService);",
									"    });",
									"    pm.test('Service request quantity must be ' + citizenQuantity, function() {",
									"        pm.expect(currentCitizen.service_reqs[0].quantity).to.be.eql(citizenQuantity);",
									"    });",
									"    pm.test('Service request periods length must be 3 (now three periods)', function() {",
									"        pm.expect(allPeriods.length).to.be.eql(3);",
									"    });",
									"    pm.test('There must be no open periods', function() {",
									"        pm.expect(openPeriodCount).to.be.eql(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}citizens/{{current_client}}/citizen_left/",
							"host": [
								"{{url}}citizens"
							],
							"path": [
								"{{current_client}}",
								"citizen_left",
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Setup Booking",
			"item": [
				{
					"name": "Setup-Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43dc786b-5b54-409d-a5ba-3c1d6c78adc4",
								"exec": [
									"//  See if the use-prefix global has been set.  Use default if not.",
									"let usePrefix = '';",
									"",
									"//  Hardcode recurring booking and appointment UUIDs.",
									"pm.globals.set('pm_booking_uuid', '\"pm_recurring_booking_uuid\"');",
									"pm.globals.set('pm_appt_uuid', '\"pm_recurring_appt_uuid\"');",
									"",
									"if (pm.globals.get('use-prefix')) {",
									"    console.log(\"==> use-prefix exists\");",
									"    usePrefix = pm.globals.get('use-prefix');",
									"    console.log(\"    --> Prefix is: \" + usePrefix);",
									"    ",
									"    //  Set up all globals, using the correct prefix.",
									"    pm.globals.set('auth_url', pm.globals.get(usePrefix + 'auth_url'));",
									"    pm.globals.set('realm', pm.globals.get(usePrefix + 'realm'));",
									"    pm.globals.set('clientid', pm.globals.get(usePrefix + 'clientid'));",
									"    pm.globals.set('client_secret', pm.globals.get(usePrefix + 'client_secret'));",
									"    pm.globals.set('url', pm.globals.get(usePrefix + 'url'));",
									"",
									"    pm.globals.set('public_url', pm.globals.get(usePrefix + 'public_url'));",
									"    pm.globals.set('public_user_id', pm.globals.get(usePrefix + 'public_user_id'));",
									"    pm.globals.set('public_user_password', pm.globals.get(usePrefix + 'public_user_password'));",
									"}",
									"else {",
									"    console.log(\"==> use-prefix does not exist\");",
									"    console.log(\"    --> No default globals set.\");",
									"}",
									"",
									"//  If no maximum load time defined, set a default.",
									"if (!pm.globals.get('max_load_time')) {",
									"    console.log(\"==> max_load_time not present, default set.\");",
									"    pm.globals.set(\"max_load_time\", JSON.stringify(1503));",
									"}",
									"",
									"//  If no maximum response defined, set a default.",
									"if (!pm.globals.get('max_response_time')) {",
									"    console.log(\"==> max_response_time not present, default set.\");",
									"    pm.globals.set(\"max_response_time\", JSON.stringify(15005));",
									"}",
									"",
									"//  Display the values of all globals.",
									"console.log(\"\");",
									"console.log(\"==> Globals are:\");",
									"console.log(\"    --> auth_url:          \" + pm.globals.get(\"auth_url\"));",
									"console.log(\"    --> realm:             \" + pm.globals.get(\"realm\"));",
									"console.log(\"    --> clientid:          \" + pm.globals.get(\"clientid\"));",
									"console.log(\"    --> client_secret:     \" + pm.globals.get(\"client_secret\"));",
									"console.log(\"    --> url:               \" + pm.globals.get(\"url\"));",
									"console.log(\"    --> max_load_time:     \" + pm.globals.get(\"max_load_time\"));",
									"console.log(\"    --> max_response_time: \" + pm.globals.get(\"max_response_time\"));",
									"console.log(\"    --> booking_uuid:      \" + pm.globals.get(\"pm_booking_uuid\"));",
									"console.log(\"    --> appointment_uuid:  \" + pm.globals.get(\"pm_appt_uuid\"));",
									"console.log(\"    --> public_url:        \" + pm.globals.get(\"public_url\"));",
									"console.log(\"    --> public_user_id:    \" + pm.globals.get(\"public_user_id\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a0b82a4-1171-45c1-b130-2ee3796a99f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Dummy data."
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "Authentication Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ec7f7f5-f16d-43d4-b7c2-c0df6a615614",
								"exec": [
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to make sure that the access token field is not null",
									"pm.test(\"Access Token is not null\", function(){",
									"    var access_token = jsonData.access_token;",
									"    if (pm.expect(access_token).not.eql(null)){",
									"        pm.globals.set(\"token\", access_token);",
									"    }",
									"});",
									"//Test to make sure that the refresh token response field is not null",
									"pm.test(\"Refresh Token is not null\", function(){",
									"    var refresh_token = jsonData.refresh_token;",
									"    if (pm.expect(refresh_token).not.eql(null)){",
									"        pm.globals.set(\"refresh_token\", refresh_token);",
									"    }",
									"});",
									"//Test to make sure that expires in response field is not nullf",
									"pm.test(\"Expires In is not null\", function(){",
									"    var expires_in = jsonData.expires_in;",
									"    if (pm.expect(expires_in).not.eql(null)){",
									"        pm.globals.set(\"expires_in\", expires_in);",
									"    }",
									"});",
									"//Test to make sure that refresh expires in response fiels is not null",
									"pm.test(\"Refresh Expires In is not null\", function(){",
									"    var refresh_expires_in = jsonData.refresh_expires_in;",
									"    if (pm.expect(refresh_expires_in).not.eql(null)){",
									"        pm.globals.set(\"refresh_expires_in\", refresh_expires_in);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{auth_url}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Auth-First",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b36ee4f-f539-42f8-8af0-da599d7758bf",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_first\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "auth_url = globals.auth_url;\nrealm = globals.realm;\nclientid = globals.clientid;\nuserid = globals.userid;\npassword = globals.password;\nclient_secret = globals.client_secret;\n\nconst echoPostRequest = {\n  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' + clientid \n          + '&username=' + userid \n          + '&password=' + password\n          + '&client_secret=' + client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    if (jsonData.hasOwnProperty('access_token')) {\n    \tpm.globals.set(\"token\", jsonData.access_token);\n\t    pm.globals.set(\"refresh_token\", jsonData.refresh_token);\n\t    console.log(err ? err : res.json());\n\t} else {\n\t    pm.globals.set(\"token\", 0);\n\t    pm.globals.set(\"refresh_token\", 0);\n\t    pm.globals.set(\"token_expires\", 0);\n\t    pm.globals.set(\"refresh_token_expires\", 0);\n\t}\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Basic-Response-Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3beff663-e160-4eda-bc56-4f3852314711",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"basic_response_test\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  If no maximum response defined, set a default.\nresponse_max = 0;\nif (globals.response_max) {\n    response_max = JSON.parse(globals.response_max);\n}\nelse {\n    response_max = 5009;\n    pm.globals.set(\"response_max\", JSON.stringify(response_max));\n};\n\n//  Get the max response time allowed.\npm.test('Response time less than ' + response_max.toString() + 'ms', function(){\n    pm.expect(pm.response.responseTime).to.be.below(response_max);\n});\n\npm.test(\"Response code for request is 200\", function(){\n    pm.response.to.have.status(200);\n});\npm.test('Response header should have Content-Type of application/json', function() {\n    pm.response.to.have.header('content-type', 'application/json');\n});\npm.test('Response body be in JSON format', function() {\n    pm.response.to.be.json; \n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Type-Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff27c839-a2c1-4ee7-a8c7-4497f0f820b0",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"init_exam_type_data\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Finds an exam name in the JSON list allTypes of exam types.\nfunction find_exam(input_exam_name, allTypes) {\n\texam_id_value = -1;\n\n    //  Loop to look for the input exam name.\n    if (allTypes) {\n        allTypes.forEach(function(type) {\n            if ((type.exam_type_name) == input_exam_name) {\n            exam_id_value = type.exam_type_id;\n            }\n        });\n    }\n    \n    //  If the exam wasn't found, set it to be the first exam.\n    if (exam_id_value == -1) {\n        exam_id_value = allTypes[0].exam_type_id;\n    }\n\n    //  Return the exam_id_type of the input exam name.\n    return exam_id_value;\n}\n\n//  Get the list of all possible exam types.\nallTypes = null;\nvar jsonData = JSON.parse(responseBody);\nif (jsonData.hasOwnProperty(\"exam_types\")) {\n\tallTypes = jsonData.exam_types;\n}\n\nexam_array = [];\nexam_array.push({name: \"IPSE - 4HR Single Exam\", weight: 40.2, id: find_exam(\"IPSE - 4HR Single Exam\", allTypes)});\nname = \"IPSE - 4HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[0].weight + 14.5, id: find_exam(name, allTypes)});\nname = \"SLE - 3HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[1].weight + 7.4, id: find_exam(name, allTypes)});\nname = \"COFQ - 3HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[2].weight + 5.8, id: find_exam(name, allTypes)});\nname = \"IPSE - 4HR Group Exam\";\nexam_array.push({name: name, weight: exam_array[3].weight + 5.7, id: find_exam(name, allTypes)});\nname = \"COFQ - 3HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[4].weight + 5.5, id: find_exam(name, allTypes)});\nname = \"Monthly Session Exam\";\nexam_array.push({name: name, weight: exam_array[5].weight + 3.8, id: find_exam(name, allTypes)});\nname = \"SLE - 3HR Single Exam\";\nexam_array.push({name: name, weight: exam_array[6].weight + 3.5, id: find_exam(name, allTypes)});\nname = \"Angling Guide Outfitter\";\nexam_array.push({name: name, weight: exam_array[7].weight + 2.4, id: find_exam(name, allTypes)});\nname = \"IPSE - 5HR Single Exam - Time Extension\";\nexam_array.push({name: name, weight: exam_array[8].weight + 2.3, id: find_exam(name, allTypes)});\nname = \"Exam Booking - 3 Hour Miscellaneous\";\nexam_array.push({name: name, weight: exam_array[9].weight + 1.7, id: find_exam(name, allTypes)});\n\n//  Store the initialized exam data for later use.\npostman.setEnvironmentVariable(\"exam_array_data\", JSON.stringify(exam_array));"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Get-Random",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8654e06-a1f9-4834-9439-838ee501c0e8",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"create_random_functions\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Function returns a weighted randomized exam type index.\nfunction get_random_index(exam_array) {\n\n    //  Generate a random number up to the maximum weight allowed.\n    random_number = Math.floor(Math.random() * exam_array[exam_array.length - 1].weight);\n    \n    //  Get the index of the exam type corresponding to that weight.\n    index = get_index(random_number, exam_array);\n\n    //  Return the index.\n    return index;\n}\n\n//  Based on a random number, turns it into a weighted randomized exam type index.\nfunction get_index(random_value, exam_array) {\n    index = 0;\n    var i;\n    for (i = 0; i < exam_array.length; i++) {\n        if (random_value <= exam_array[i].weight) {\n            index = i;\n            break;\n        }\n    }\n    \n    return index;\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Room-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36518a81-7886-44a4-a407-2797cc22f12a",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"room_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar roomSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"rooms\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"capacity\": {\"type\": \"number\"},\n                    \"color\": {\"type\": \"string\"},\n                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                    \"office\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"appointment_duration\": {\"type\": [\"null\", \"number\"]},\n                            \"appointments_days_limit\": {\"type\": [\"null\", \"number\"]},\n                            \"appointments_enabled_ind\": {\"type\": \"number\"},\n                            \"back_office_list\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"actual_service_ind\": {\"type\": \"number\"},\n                                        \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                        \"display_dashboard_ind\": {\"type\": \"number\"},\n                                        \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                        \"parent\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"service_name\": {\"type\": \"string\"}\n                                            },\n                                            \"required\": [\"service_name\"]\n                                        },\n                                        \"parent_id\": {\"type\": \"number\"},\n                                        \"prefix\": {\"type\": \"string\"},\n                                        \"service_code\": {\"type\": \"string\"},\n                                        \"service_desc\": {\"type\": \"string\"},\n                                        \"service_id\": {\"type\": \"number\"},\n                                        \"service_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                                 \"external_service_name\", \"online_availability\",\n                                                 \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                                 \"service_code\", \"service_desc\", \"service_id\",\n                                                 \"service_name\"]\n                                },\n                            },\n                            \"civic_address\": {\"type\": [\"null\", \"string\"]},\n                            \"counters\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"counter_id\": {\"type\": \"number\"},\n                                        \"counter_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"counter_id\", \"counter_name\"]\n                                },\n                            },\n                            \"exams_enabled_ind\": {\"type\": \"number\"},\n                            \"latitude\": {\"type\": \"number\"},\n                            \"longitude\": {\"type\": \"number\"},\n                            \"max_person_appointment_per_day\": {\"type\": [\"null\", \"number\"]},\n                            \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n                            \"office_id\": {\"type\": \"number\"},\n                            \"office_name\": {\"type\": \"string\"},\n                            \"office_number\": {\"type\": \"number\"},\n                            \"online_status\": {\"type\": \"string\"},\n                            \"quick_list\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"actual_service_ind\": {\"type\": \"number\"},\n                                        \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                        \"display_dashboard_ind\": {\"type\": \"number\"},\n                                        \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                        \"parent\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"service_name\": {\"type\": \"string\"}\n                                            },\n                                            \"required\": [\"service_name\"]\n                                        },\n                                        \"parent_id\": {\"type\": \"number\"},\n                                        \"prefix\": {\"type\": \"string\"},\n                                        \"service_code\": {\"type\": \"string\"},\n                                        \"service_desc\": {\"type\": \"string\"},\n                                        \"service_id\": {\"type\": \"number\"},\n                                        \"service_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                                \"external_service_name\", \"online_availability\",\n                                                \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                                \"service_code\", \"service_desc\", \"service_id\",\n                                                \"service_name\"]\n                                },\n                            },\n                            \"sb\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"sb_id\": {\"type\": \"number\"},\n                                    \"sb_type\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"sb_id\", \"sb_type\"]\n                            },\n                            \"sb_id\": {\"type\": \"number\"},\n                            \"telephone\": {\"type\": [\"null\", \"string\"]},\n                            \"timeslots\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"day_of_week\": {\"type\": [\"null\", \"array\"]},\n                                        \"end_time\": {\"type\": \"string\"},\n                                        \"no_of_slots\": {\"type\": \"number\"},\n                                        \"office\": {\"type\": [\"null\", \"number\"]},\n                                        \"start_time\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\",\n                                                \"office\", \"start_time\"]\n                                },\n                            },\n                            \"timezone\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"timezone_id\": {\"type\": \"number\"},\n                                    \"timezone_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"timezone_id\", \"timezone_name\"]\n                            }\n                        },\n                        \"required\": [\"appointment_duration\", \"appointments_days_limit\",\n                                    \"appointments_enabled_ind\", \"back_office_list\", \"civic_address\",\n                                    \"counters\", \"exams_enabled_ind\", \"latitude\",\n                                    \"longitude\", \"max_person_appointment_per_day\",\n                                    \"office_appointment_message\", \"office_id\", \"office_name\",\n                                    \"office_number\", \"online_status\", \"quick_list\", \"sb\", \"sb_id\",\n                                    \"telephone\", \"timeslots\", \"timezone\"]\n                    },\n                    \"room_id\": {\"type\": \"number\"},\n                    \"room_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"capacity\", \"color\", \"deleted\", \"office\", \"room_id\", \"room_name\"]\n            }\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"rooms\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Room Schema\", function(){\n    pm.expect(tv4.validate(jsonData, roomSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df2f7b88-6f84-40bc-8a1c-a9d03dda0bcd",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar examSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"exam\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"exam_type\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"exam_color\": {\"type\": \"string\"},\n                        \"exam_type_id\": {\"type\": \"number\"},\n                        \"exam_type_name\": {\"type\": \"string\"},\n                        \"group_exam_ind\": {\"type\": \"number\"},\n                        \"ita_ind\": {\"type\": \"number\"},\n                        \"method_type\": {\"type\": \"string\"},\n                        \"number_of_hours\": {\"type\": \"number\"},\n                        \"number_of_minutes\": {\"type\": [\"number\", \"null\"]},\n                        \"pesticide_exam_ind\": {\"type\": \"number\" }\n                    },\n                    \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\",\n                                 \"method_type\", \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"exam_type_id\": {\"type\": \"number\"},\n                \"notes\": {\"type\": \"string\"},\n                \"exam_written_ind\": {\"type\": \"number\"},\n                \"examinee_email\": {\"type\": [\"null\", \"string\"]},\n                \"exam_destroyed_date\": {\"type\": [\"null\", \"string\"]},\n                \"receipt\": {\"type\": [\"null\", \"number\", \"string\"]},\n                \"session_number\": {\"type\": [\"number\", \"null\"]},\n                \"office\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\"},\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\": \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        }\n                    },\n                    \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\",\n                                 \"office_number\", \"timezone\"]\n                },\n                \"exam_id\": {\"type\": \"number\"},\n                \"bcmp_job_id\": {\"type\": [\"null\", \"number\"]},\n                \"expiry_date\": {\"type\": [\"string\", \"null\"]},\n                \"sbc_managed_ind\": {\"type\": \"number\"},\n                \"invigilator_id\": {\"type\": [\"null\", \"number\"]},\n                \"examinee_phone\": {\"type\": [\"null\", \"string\"]},\n                \"upload_received_ind\": {\"type\": \"number\"},\n                \"booking_id\": {\"type\": [\"null\", \"number\"]},\n                \"booking\": {\"type\": [\"null\", \"object\"]},\n                \"invigilator\": {\"type\": [\"null\", \"object\"]},\n                \"is_pesticide\": {\"type\": \"number\"},\n                \"exam_returned_date\": {\"type\": [\"null\", \"string\"]},\n                \"payee_email\": {\"type\": [\"null\", \"string\"]},\n                \"candidates_list\": {\"type\": [\"null\", \"array\", \"object\"]},\n                \"exam_returned_tracking_number\": {\"type\": [\"null\", \"string\"]},\n                \"payee_name\": {\"type\": [\"null\", \"string\"]},\n                \"deleted_date\": {\"type\": [\"null\", \"string\"]},\n                \"payee_phone\": {\"type\": [\"null\", \"string\"]},\n                \"event_id\": {\"type\": \"string\"},\n                \"payee_ind\": {\"type\": \"number\"},\n                \"exam_received_date\": {\"type\": [\"null\", \"string\"]},\n                \"number_of_students\": {\"type\": \"number\"},\n                \"exam_method\": {\"type\": \"string\"},\n                \"offsite_location\": {\"type\": [\"null\", \"string\"]},\n                \"exam_name\": {\"type\": \"string\"},\n                \"examinee_name\": {\"type\": \"string\"},\n                \"receipt_sent_ind\": {\"type\": \"number\"}\n            },\n            \"required\": [\"exam_type\", \"office_id\", \"exam_type_id\", \"notes\", \"exam_written_ind\", \"examinee_email\", \"exam_destroyed_date\", \"receipt\",\n                         \"session_number\", \"office\", \"exam_id\", \"bcmp_job_id\", \"expiry_date\", \"sbc_managed_ind\", \"invigilator_id\", \"examinee_phone\",\n                         \"upload_received_ind\", \"booking_id\", \"booking\", \"invigilator\", \"is_pesticide\", \"exam_returned_date\", \"payee_email\",\n                         \"candidates_list\", \"exam_returned_tracking_number\", \"payee_name\", \"deleted_date\", \"payee_phone\", \"event_id\", \"payee_ind\",\n                         \"exam_received_date\", \"number_of_students\", \"exam_method\", \"offsite_location\", \"exam_name\", \"examinee_name\", \"receipt_sent_ind\"]\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"exam\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Exam Schema\", function(){\n    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ffa23b0-0259-44b7-9401-7a894d26d30b",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an exam property.\npm.test(\"Response should have exam property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"exam\")).to.be.true;\n});\n\n//  If jsonData has exam property, check data.\nif (jsonData.hasOwnProperty(\"exam\")) {\n\n    //Test to see if Event ID field remains unchanged\n    pm.test(\"Validate Event Id has expected value\", function(){\n        pm.expect(jsonData.event_id === environment.event_id);\n    });\n\n    //Test to see if exam method field remains unchanged\n    pm.test(\"Validate exam method has expected value\", function(){\n        pm.expect(jsonData.exam_method === environment.exam_method);\n    });\n\n    //Test to see if exam name field remains unchanged\n    pm.test(\"Validate exam name has expected value\", function(){\n        pm.expect(jsonData.exam_name === environment.exam_name);\n    });\n\n    //Test to see if exam type field remains unchanged\n    pm.test(\"Validate exam type id has expected value\", function(){\n        pm.expect(jsonData.exam_type_id === environment.random_exam_type_id);\n    });\n\n    //Test to see if exam written indicator field remains unchanged\n    pm.test(\"Validate exam written indicator has expected value\", function(){\n        pm.expect(jsonData.exam_written_ind === environment.exam_written_ind);\n    });\n\n    //Test to see if examinee name field remains unchanged\n    pm.test(\"Validate examinee name has expected value\", function(){\n        pm.expect(jsonData.examinee_name === environment.examinee_name);\n    });\n\n    //Test to see if notes field remains unchanged\n    pm.test(\"Validate notes has expected value\", function(){\n        pm.expect(jsonData.notes === environment.notes);\n    });\n\n    //Test to see if number of students field remains unchanged\n    pm.test(\"Validate number of students has expected value\", function(){\n        pm.expect(jsonData.number_of_students === environment.number_of_students);\n    });\n\n    //Test to see if office id remains unchanged\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n\n    //Test to see if offsite location is expected\n    pm.test(\"Validate offsite location has expected value\", function(){\n        pm.expect(jsonData.offsite_location === environment.offsite_location);\n    });\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Exam-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ab0a55f-22da-4574-9cdd-90bc01c57da6",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"exam_schema_list_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar examSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"exams\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"exam_type\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"exam_color\": {\"type\": \"string\"},\n                            \"exam_type_id\": {\"type\": \"number\"},\n                            \"exam_type_name\": {\"type\": \"string\"},\n                            \"group_exam_ind\": {\"type\": \"number\"},\n                            \"ita_ind\": {\"type\": \"number\"},\n                            \"method_type\": {\"type\": \"string\"},\n                            \"number_of_hours\": {\"type\": \"number\"},\n                            \"number_of_minutes\": {\"type\": [\"number\", \"null\"]},\n                            \"pesticide_exam_ind\": {\"type\": \"number\" }\n                        },\n                        \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\",\n                                     \"method_type\", \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]\n                    },\n                    \"office_id\": {\"type\": \"number\"},\n                    \"exam_type_id\": {\"type\": \"number\"},\n                    \"notes\": {\"type\": [\"null\", \"string\"]},\n                    \"exam_written_ind\": {\"type\": \"number\"},\n                    \"examinee_email\": {\"type\": [\"null\", \"string\"]},\n                    \"exam_destroyed_date\": {\"type\": [\"null\", \"string\"]},\n                    \"receipt\": {\"type\": [\"null\", \"string\"]},\n                    \"session_number\": {\"type\": [\"number\", \"null\", \"string\"]},\n                    \"exam_id\": {\"type\": \"number\"},\n                    \"expiry_date\": {\"type\": [\"string\", \"null\"]},\n                    \"sbc_managed_ind\": {\"type\": \"number\"},\n                    \"invigilator_id\": {\"type\": [\"null\", \"number\"]},\n                    \"examinee_phone\": {\"type\": [\"null\", \"string\"]},\n                    \"upload_received_ind\": {\"type\": \"number\"},\n                    \"booking_id\": {\"type\": [\"null\", \"number\"]},\n                    \"booking\": {\"type\": [\"null\", \"object\"]},\n                    \"examinee_name\": {\"type\": [\"null\", \"string\"]},\n                    \"invigilator\": {\"type\": [\"null\", \"object\"]},\n                    \"is_pesticide\": {\"type\": \"number\"},\n                    \"exam_returned_date\": {\"type\": [\"null\", \"string\"]},\n                    \"payee_email\": {\"type\": [\"null\", \"string\"]},\n                    \"candidates_list\": {\"type\": [\"null\", \"array\", \"object\"]},\n                    \"exam_returned_tracking_number\": {\"type\": [\"null\", \"string\"]},\n                    \"payee_name\": {\"type\": [\"null\", \"string\"]},\n                    \"deleted_date\": {\"type\": [\"null\", \"string\"]},\n                    \"office\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"appointments_enabled_ind\": {\"type\": \"number\"},\n                            \"exams_enabled_ind\": {\"type\": \"number\"},\n                            \"office_id\": {\"type\": \"number\"},\n                            \"office_name\": {\"type\": \"string\"},\n                            \"office_number\": {\"type\": \"number\"},\n                            \"timezone\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"timezone_id\": {\"type\": \"number\"},\n                                    \"timezone_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"timezone_id\", \"timezone_name\"]\n                            },\n                        },\n                        \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\", \"timezone\"]\n                    },\n                    \"payee_phone\": {\"type\": [\"null\", \"string\"]},\n                    \"event_id\": {\"type\": [\"null\", \"string\"]},\n                    \"payee_ind\": {\"type\": \"number\"},\n                    \"exam_received_date\": {\"type\": [\"null\", \"string\"]},\n                    \"number_of_students\": {\"type\": [\"null\", \"number\"]},\n                    \"exam_method\": {\"type\": \"string\"},\n                    \"offsite_location\": {\"type\": [\"null\", \"string\"]},\n                    \"receipt_sent_ind\": {\"type\": \"number\"},\n                    \"exam_name\": {\"type\": \"string\"},\n                    \"bcmp_job_id\": {\"type\": [\"null\", \"string\"]}\n                },\n                \"required\": [\"exam_type\", \"office_id\", \"exam_type_id\", \"notes\", \"exam_written_ind\", \"examinee_email\", \"exam_destroyed_date\",\n                             \"receipt\", \"session_number\", \"exam_id\", \"expiry_date\", \"sbc_managed_ind\", \"invigilator_id\",\n                             \"examinee_phone\", \"upload_received_ind\", \"booking_id\", \"booking\", \"examinee_name\", \"invigilator\",\n                             \"is_pesticide\", \"exam_returned_date\", \"payee_email\", \"candidates_list\", \"exam_returned_tracking_number\",\n                             \"payee_name\", \"deleted_date\", \"office\", \"payee_phone\", \"event_id\", \"payee_ind\", \"exam_received_date\",\n                             \"number_of_students\", \"exam_method\", \"offsite_location\", \"receipt_sent_ind\", \"exam_name\", \"bcmp_job_id\"]\n            },\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"exams\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Exam List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Booking-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15204f24-c65d-404b-bc20-588711aed456",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"booking_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar bookingSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"booking\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"blackout_flag\": {\"type\": \"string\"},\n            \"blackout_notes\": {\"type\": [\"string\", \"null\"]},\n            \"booking_contact_information\": {\"type\": [\"string\", \"null\"]},\n            \"booking_id\": {\"type\": \"number\"},\n            \"booking_name\": {\"type\": [\"string\", \"null\"]},\n            \"end_time\": {\"type\": \"string\"},\n            \"fees\": {\"type\": \"string\"},\n            \"invigilators\": {\"type\": \"array\"},\n            \"office\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"appointments_enabled_ind\": {\"type\": \"number\"},\n                    \"exams_enabled_ind\": {\"type\": \"number\"},\n                    \"office_id\": {\"type\": \"number\"},\n                    \"office_name\": {\"type\": \"string\"},\n                    \"office_number\": {\"type\": \"number\"},\n                    \"timezone\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"timezone_id\": {\"type\": \"number\"},\n                            \"timezone_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"timezone_id\", \"timezone_name\"]\n                    }\n                },\n                \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\", \"timezone\"]\n            },\n            \"office_id\": {\"type\": \"number\"},\n            \"recurring_uuid\": {\"type\": [\"string\", \"null\"]},\n            \"room\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"capacity\": {\"type\": \"number\"},\n                    \"color\": {\"type\": \"string\"},\n                    \"deleted\": {\"type\": [\"string\", \"null\"]},\n                    \"room_id\": {\"type\": \"number\"},\n                    \"room_name\": {\"type\": \"string\"}\n                },\n                \"required\": [\"capacity\", \"color\", \"room_id\", \"room_name\", \"deleted\"]\n            },\n            \"room_id\": {\"type\": \"number\"},\n            \"sbc_staff_invigilated\": {\"type\": \"number\"},\n            \"shadow_invigilator_id\": {\"type\": [\"number\", \"null\"]},\n            \"start_time\": {\"type\": \"string\"}\n          },\n          \"required\": [\"blackout_flag\", \"blackout_notes\", \"booking_contact_information\", \"booking_id\",\n                       \"booking_name\", \"end_time\", \"fees\", \"invigilators\", \"office\", \"office_id\",\n                       \"recurring_uuid\", \"room\", \"room_id\", \"sbc_staff_invigilated\", \"shadow_invigilator_id\",\n                       \"start_time\"]\n        },\n        \"errors\": { \"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"booking\", \"errors\"]\n}\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Booking Schema\", function(){\n    pm.expect(tv4.validate(jsonData, bookingSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Booking-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "135f3ce1-acac-4eac-b384-0e81af2bf4d7",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"booking_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an booking property.\npm.test(\"Response should have booking property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"booking\")).to.be.true;\n});\n\n//  If jsonData has booking property, check data.\nif (jsonData.hasOwnProperty(\"booking\")) {\n\n    //Test to see if booking name has expected value\n    pm.test(\"Validate Booking Name has expected value\", function(){\n        pm.expect(jsonData.booking_name === environment.booking_name);\n    });\n\n    //Test to see if start time has expected value\n    pm.test(\"Validate start time has expected value\", function(){\n        pm.expect(jsonData.start_time === environment.start_time);\n    });\n\n    //Test to see if end time has expected value\n    pm.test(\"Validate end time has expected value\", function(){\n        pm.expect(jsonData.end_time === environment.end_time);\n    });\n\n    //Test to see if room id has expected value\n    pm.test(\"Validate room id has expected value\", function(){\n        pm.expect(jsonData.room_id === environment.room_id_1);\n    });\n\n    //Test to see if fees field has expected value\n    pm.test(\"Validate fees has expected value\", function(){\n        pm.expect(jsonData.fees === environment.fees);\n    });\n\n    //Test to see if office id field has expected value\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n}\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Booking-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b01ce657-9c4b-43ce-a84f-19f3330b13a3",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"booking_list_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "var bookingSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"bookings\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"booking_name\": {\"type\": \"string\"},\n                    \"blackout_flag\": {\"type\": \"string\"},\n                    \"sbc_staff_invigilated\": {\"type\": \"number\"},\n                    \"office_id\": {\"type\": \"number\"},\n                    \"room_id\": {\"type\": [\"null\", \"number\"]},\n                    \"blackout_notes\": {\"type\": [\"null\", \"string\"]},\n                    \"shadow_invigilator_id\": {\"type\": [\"null\", \"number\"]},\n                    \"room\": {\n                        \"type\": [\"null\", \"object\"],\n                        \"properties\": {\n                            \"capacity\": {\"type\": \"number\"},\n                            \"color\": {\"type\": \"string\"},\n                            \"deleted\": {\"type\": [\"null\", \"string\"]},\n                            \"room_id\": {\"type\": \"number\"},\n                            \"room_name\": {\"type\": \"string\"}\n                        },\n                        \"required\": [\"capacity\", \"color\", \"deleted\", \"room_id\", \"room_name\"]\n                    },\n                    \"booking_id\": {\"type\": \"number\"},\n                    \"end_time\": {\"type\": \"string\"},\n                    \"booking_contact_information\": {\"type\": [\"null\", \"string\"]},\n                    \"recurring_uuid\": {\"type\": [\"null\", \"string\"]},\n                    \"office\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"appointments_enabled_ind\": {\"type\": \"number\"},\n                            \"exams_enabled_ind\": {\"type\": \"number\"},\n                            \"office_id\": {\"type\": \"number\"},\n                            \"office_name\": {\"type\": \"string\"},\n                            \"office_number\": {\"type\": \"number\"},\n                            \"timezone\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"timezone_id\": {\"type\": \"number\"},\n                                    \"timezone_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"timezone_id\", \"timezone_name\"]\n                            }\n                        },\n                        \"required\": [\"appointments_enabled_ind\", \"exams_enabled_ind\", \"office_id\", \"office_name\", \"office_number\", \"timezone\"]\n                    },\n                    \"invigilators\": {\"type\": \"array\"},\n                    \"fees\": {\"type\": [\"null\", \"string\"]},\n                    \"start_time\": {\"type\": \"string\"},\n                },\n                \"required\": [\"booking_name\", \"blackout_flag\", \"sbc_staff_invigilated\", \"office_id\", \"room_id\", \"blackout_notes\",\n                             \"shadow_invigilator_id\", \"room\", \"booking_id\", \"end_time\", \"booking_contact_information\", \"recurring_uuid\",\n                             \"office\", \"invigilators\", \"fees\", \"start_time\"]\n            },\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"bookings\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Booking List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, bookingSchema)).to.be.true;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Invigilator-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a44a0a62-10ca-4c55-8ed9-73a56f04b5dc",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"invigilator_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar invigilatorSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"invigilators\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"contact_email\": {\"type\": \"string\"},\n                    \"contact_phone\": {\"type\": \"string\"},\n                    \"contract_expiry_date\": {\"type\": \"string\"},\n                    \"contract_number\": {\"type\": \"string\"},\n                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                    \"invigilator_id\": {\"type\": \"number\"},\n                    \"invigilator_name\": {\"type\": \"string\"},\n                    \"invigilator_notes\": {\"type\": [\"null\", \"string\"]},\n                    \"office\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"appointment_duration\": {\"type\": [\"null\", \"number\"]},\n                            \"appointments_days_limit\": {\"type\": [\"null\", \"number\"]},\n                            \"appointments_enabled_ind\": {\"type\": \"number\"},\n                            \"back_office_list\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"actual_service_ind\": {\"type\": \"number\"},\n                                        \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                        \"display_dashboard_ind\": {\"type\": \"number\"},\n                                        \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                        \"parent\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"service_name\": {\"type\": \"string\"}\n                                            },\n                                            \"required\": [\"service_name\"]\n                                        },\n                                        \"parent_id\": {\"type\": \"number\"},\n                                        \"prefix\": {\"type\": \"string\"},\n                                        \"service_code\": {\"type\": \"string\"},\n                                        \"service_desc\": {\"type\": \"string\"},\n                                        \"service_id\": {\"type\": \"number\"},\n                                        \"service_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                                 \"external_service_name\", \"online_availability\",\n                                                 \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                                 \"service_code\", \"service_desc\", \"service_id\",\n                                                 \"service_name\"]\n                                },\n                            },\n                            \"civic_address\": {\"type\": [\"null\", \"string\"]},\n                            \"counters\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"counter_id\": {\"type\": \"number\"},\n                                        \"counter_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"counter_id\", \"counter_name\"]\n                                },\n                            },\n                            \"exams_enabled_ind\": {\"type\": \"number\"},\n                            \"latitude\": {\"type\": [\"null\", \"number\"]},\n                            \"longitude\": {\"type\": [\"null\", \"number\"]},\n                            \"max_person_appointment_per_day\": {\"type\": [\"null\", \"number\"]},\n                            \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n                            \"office_id\": {\"type\": \"number\"},\n                            \"office_name\": {\"type\": \"string\"},\n                            \"office_number\": {\"type\": \"number\"},\n                            \"online_status\": {\"type\": \"string\"},\n                            \"quick_list\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"actual_service_ind\": {\"type\": \"number\"},\n                                        \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                        \"display_dashboard_ind\": {\"type\": \"number\"},\n                                        \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                        \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                        \"parent\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"service_name\": {\"type\": \"string\"}\n                                            },\n                                            \"required\": [\"service_name\"]\n                                        },\n                                        \"parent_id\": {\"type\": \"number\"},\n                                        \"prefix\": {\"type\": \"string\"},\n                                        \"service_code\": {\"type\": \"string\"},\n                                        \"service_desc\": {\"type\": \"string\"},\n                                        \"service_id\": {\"type\": \"number\"},\n                                        \"service_name\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                                 \"external_service_name\", \"online_availability\",\n                                                 \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                                 \"service_code\", \"service_desc\", \"service_id\",\n                                                 \"service_name\"]\n                                },\n                            },\n                            \"sb\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"sb_id\": {\"type\": \"number\"},\n                                    \"sb_type\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"sb_id\", \"sb_type\"]\n                            },\n                            \"sb_id\": {\"type\": \"number\"},\n                            \"telephone\": {\"type\": [\"null\", \"string\"]},\n                            \"timeslots\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"day_of_week\": {\"type\": [\"null\", \"array\"]},\n                                        \"end_time\": {\"type\": \"string\"},\n                                        \"no_of_slots\": {\"type\": \"number\"},\n                                        \"office\": {\"type\": [\"null\", \"number\"]},\n                                        \"start_time\": {\"type\": \"string\"}\n                                    },\n                                    \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\",\n                                                 \"office\", \"start_time\"]\n                                },\n                            },\n                            \"timezone\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"timezone_id\": {\"type\": \"number\"},\n                                    \"timezone_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"timezone_id\", \"timezone_name\"]\n                            }\n                        },\n                        \"required\": [\"appointment_duration\", \"appointments_days_limit\",\n                                     \"appointments_enabled_ind\", \"back_office_list\", \"civic_address\",\n                                     \"counters\", \"exams_enabled_ind\", \"latitude\",\n                                     \"longitude\", \"max_person_appointment_per_day\",\n                                     \"office_appointment_message\", \"office_id\", \"office_name\",\n                                     \"office_number\", \"online_status\", \"quick_list\", \"sb\", \"sb_id\",\n                                     \"telephone\", \"timeslots\", \"timezone\"]\n                    },\n                    \"office_id\": {\"type\": \"number\"},\n                    \"shadow_count\": {\"type\": \"number\"},\n                    \"shadow_flag\": {\"type\": \"string\"}\n                },\n                \"required\": [\"contact_email\", \"contact_phone\", \"contract_expiry_date\", \"contract_number\",\n                             \"deleted\", \"invigilator_id\", \"invigilator_name\", \"invigilator_notes\",\n                             \"office\", \"office_id\", \"shadow_count\", \"shadow_flag\"]\n            }\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"invigilators\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Invigilator Response Schema\", function(){\n    pm.expect(tv4.validate(jsonData, invigilatorSchema)).to.be.true;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Invig-One-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "141a4f44-18a4-4a60-b9c0-b2a7bfa53e49",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"invig_one_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar invigilatorSchema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"invigilator\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"contact_email\": {\"type\": \"string\"},\n                \"contact_phone\": {\"type\": \"string\"},\n                \"contract_expiry_date\": {\"type\": \"string\"},\n                \"contract_number\": {\"type\": \"string\"},\n                \"deleted\": {\"type\": [\"null\", \"string\"]},\n                \"invigilator_id\": {\"type\": \"number\"},\n                \"invigilator_name\": {\"type\": \"string\"},\n                \"invigilator_notes\": {\"type\": \"string\"},\n                \"office\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"appointment_duration\": {\"type\": [\"null\", \"number\"]},\n                        \"appointments_days_limit\": {\"type\": [\"null\", \"number\"]},\n                        \"appointments_enabled_ind\": {\"type\": \"number\"},\n                        \"back_office_list\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"actual_service_ind\": {\"type\": \"number\"},\n                                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                    \"parent\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"service_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"service_name\"]\n                                    },\n                                    \"parent_id\": {\"type\": \"number\"},\n                                    \"prefix\": {\"type\": \"string\"},\n                                    \"service_code\": {\"type\": \"string\"},\n                                    \"service_desc\": {\"type\": \"string\"},\n                                    \"service_id\": {\"type\": \"number\"},\n                                    \"service_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                             \"external_service_name\", \"online_availability\",\n                                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                             \"service_code\", \"service_desc\", \"service_id\",\n                                             \"service_name\"]\n                            },\n                        },\n                        \"civic_address\": {\"type\": [\"null\", \"string\"]},\n                        \"counters\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"counter_id\": {\"type\": \"number\"},\n                                    \"counter_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"counter_id\", \"counter_name\"]\n                            },\n                        },\n                        \"exams_enabled_ind\": {\"type\": \"number\"},\n                        \"latitude\": {\"type\": [\"null\", \"number\"]},\n                        \"longitude\": {\"type\": [\"null\", \"number\"]},\n                        \"max_person_appointment_per_day\": {\"type\": [\"null\", \"number\"]},\n                        \"office_appointment_message\": {\"type\": [\"null\", \"string\"]},\n                        \"office_id\": {\"type\": \"number\"},\n                        \"office_name\": {\"type\": \"string\"},\n                        \"office_number\": {\"type\": \"number\"},\n                        \"online_status\": {\"type\": \"string\"},\n                        \"quick_list\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"actual_service_ind\": {\"type\": \"number\"},\n                                    \"deleted\": {\"type\": [\"null\", \"string\"]},\n                                    \"display_dashboard_ind\": {\"type\": \"number\"},\n                                    \"external_service_name\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_availability\": {\"type\": [\"null\", \"string\"]},\n                                    \"online_link\": {\"type\": [\"null\", \"string\"]},\n                                    \"parent\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"service_name\": {\"type\": \"string\"}\n                                        },\n                                        \"required\": [\"service_name\"]\n                                    },\n                                    \"parent_id\": {\"type\": \"number\"},\n                                    \"prefix\": {\"type\": \"string\"},\n                                    \"service_code\": {\"type\": \"string\"},\n                                    \"service_desc\": {\"type\": \"string\"},\n                                    \"service_id\": {\"type\": \"number\"},\n                                    \"service_name\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"actual_service_ind\", \"deleted\", \"display_dashboard_ind\",\n                                             \"external_service_name\", \"online_availability\",\n                                             \"online_link\", \"parent\", \"parent_id\", \"prefix\",\n                                             \"service_code\", \"service_desc\", \"service_id\",\n                                             \"service_name\"]\n                            },\n                        },\n                        \"sb\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"sb_id\": {\"type\": \"number\"},\n                                \"sb_type\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"sb_id\", \"sb_type\"]\n                        },\n                        \"sb_id\": {\"type\": \"number\"},\n                        \"telephone\": {\"type\": [\"null\", \"string\"]},\n                        \"timeslots\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"day_of_week\": {\"type\": [\"null\", \"array\"]},\n                                    \"end_time\": {\"type\": \"string\"},\n                                    \"no_of_slots\": {\"type\": \"number\"},\n                                    \"office\": {\"type\": [\"null\", \"number\"]},\n                                    \"start_time\": {\"type\": \"string\"}\n                                },\n                                \"required\": [\"day_of_week\", \"end_time\", \"no_of_slots\",\n                                             \"office\", \"start_time\"]\n                            },\n                        },\n                        \"timezone\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"timezone_id\": {\"type\": \"number\"},\n                                \"timezone_name\": {\"type\": \"string\"}\n                            },\n                            \"required\": [\"timezone_id\", \"timezone_name\"]\n                        }\n                    },\n                    \"required\": [\"appointment_duration\", \"appointments_days_limit\",\n                                 \"appointments_enabled_ind\", \"back_office_list\", \"civic_address\",\n                                 \"counters\", \"exams_enabled_ind\", \"latitude\",\n                                 \"longitude\", \"max_person_appointment_per_day\",\n                                 \"office_appointment_message\", \"office_id\", \"office_name\",\n                                 \"office_number\", \"online_status\", \"quick_list\", \"sb\", \"sb_id\",\n                                 \"telephone\", \"timeslots\", \"timezone\"]\n                },\n                \"office_id\": {\"type\": \"number\"},\n                \"shadow_count\": {\"type\": \"number\"},\n                \"shadow_flag\": {\"type\": \"string\"}\n            },\n            \"required\": [\"contact_email\", \"contact_phone\", \"contract_expiry_date\", \"contract_number\",\n                         \"deleted\", \"invigilator_id\", \"invigilator_name\", \"invigilator_notes\",\n                         \"office\", \"office_id\", \"shadow_count\", \"shadow_flag\"]\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"invigilator\", \"errors\"]\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Invigilator Response Schema\", function(){\n    pm.expect(tv4.validate(jsonData, invigilatorSchema)).to.be.true;\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Appointment-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f2f18eb-b1be-4e6a-a10c-bf75461b0334",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"appointment_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar appointmentSchema = {\n    \"type\": \"object\", \n    \"properties\": {\n        \"appointment\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"appointment_id\": {\"type\": \"number\"},\n                \"checked_in_time\": {\"type\": [\"string\", \"null\"]},\n                \"citizen_name\": {\"type\": \"string\"},\n                \"comments\": {\"type\": \"string\"},\n                \"contact_information\": {\"type\": [\"string\", \"null\"]},\n                \"end_time\": {\"type\": \"string\"},\n                \"office\": {\"type\": \"number\"},\n                \"office_id\": {\"type\": \"number\"},\n                \"service_id\": {\"type\": [\"null\", \"number\"]},\n                \"start_time\": {\"type\": \"string\"},\n                \"blackout_flag\": {\"type\": \"string\"},\n                \"citizen_id\": {\"type\": \"number\"},\n                \"online_flag\": {\"type\": \"boolean\"},\n                \"recurring_uuid\": {\"type\": [\"null\", \"string\"]},\n                \"service\": {\"type\": [\"null\", \"number\"]}\n            },\n            \"required\": [\"appointment_id\", \"checked_in_time\", \"citizen_name\", \"comments\",\n                         \"contact_information\", \"end_time\", \"office\", \"office_id\", \"service_id\",\n                         \"start_time\", \"blackout_flag\", \"citizen_id\", \"online_flag\",\n                         \"recurring_uuid\", \"service\"],\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"appointment\", \"errors\"],\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Appointments Schema\", function(){\n    pm.expect(tv4.validate(jsonData, appointmentSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Appointment-Data-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "550896ab-245f-404d-87b8-dfe7432d2b06",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"appointment_data_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//  Make sure that jsonData has an appointment property.\npm.test(\"Response should have appointment property\", function(){\n    pm.expect(jsonData.hasOwnProperty(\"appointment\")).to.be.true;\n});\n\nvar name = jsonData.appointment.citizen_name;\nvar comments = jsonData.appointment.comments;\nvar contact = jsonData.appointment.contact_information;\nvar name_expect = JSON.parse(pm.globals.get(\"appt_citizen_name\"));\nvar comments_expect = JSON.parse(pm.globals.get(\"appt_comments\"));\nvar contact_expect = JSON.parse(pm.globals.get(\"appt_contact_information\"));\n\n//  If jsonData has booking property, check data.\nif (jsonData.hasOwnProperty(\"appointment\")) {\n\n    //Test to see if service id has expected value\n    pm.test(\"Validate Service ID has expected value\", function(){\n        pm.expect(jsonData.service_id === environment.service_id);\n    });\n\n    //Test to see if office id has expected value\n    pm.test(\"Validate office id has expected value\", function(){\n        pm.expect(jsonData.office_id === environment.current_office_id);\n    });\n\n    //Test to see if start time has expected value\n    pm.test(\"Validate start time has expected value\", function(){\n        pm.expect(jsonData.start_time === environment.start_time);\n    });\n\n    //Test to see if end time has expected value\n    pm.test(\"Validate end time has expected value\", function(){\n        pm.expect(jsonData.end_time === environment.end_time);\n    });\n\n    //Test to see if category has expected value\n    pm.test(\"Validate category has expected value\", function(){\n        pm.expect(jsonData.category === environment.category);\n    });\n\n    //Test to see if citizen name field has expected value\n    pm.test(\"Name should be '\" + name_expect + \"', it is '\" + name + \"'\", function(){\n        pm.expect(name).to.be.eql(name_expect);\n    });\n    //Test to see if comments field has expected value\n    pm.test(\"Comments should be '\" + comments_expect + \"'; it is '\" + comments +\"'\", function(){\n        pm.expect(comments).to.be.eql(comments_expect);\n    });\n    //Test to see if contact info field has expected value\n    pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact +\"'\", function(){\n        pm.expect(contact).to.be.eql(contact_expect);\n    });\n};\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "CFMS-Install-Appointment-List-Schema-Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e84c5bae-ba24-47f4-8b21-2c0ddb99d69d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"appointment_list_schema_check\", jsonData.data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Define the JSON Schema expected in response\nvar appointmentSchema = {\n    \"type\": \"object\", \n    \"properties\": {\n        \"appointments\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"appointment_id\": {\"type\": \"number\"},\n                    \"checked_in_time\": {\"type\": [\"string\", \"null\"]},\n                    \"citizen_name\": {\"type\": \"string\"},\n                    \"comments\": {\"type\": [\"null\", \"string\"]},\n                    \"contact_information\": {\"type\": [\"null\", \"string\"]},\n                    \"end_time\": {\"type\": \"string\"},\n                    \"office\": {\"type\": \"number\"},\n                    \"office_id\": {\"type\": \"number\"},\n                    \"service_id\": {\"type\": [\"null\", \"number\"]},\n                    \"start_time\": {\"type\": \"string\"},\n                    \"blackout_flag\": {\"type\": \"string\"},\n                    \"citizen_id\": {\"type\": \"number\"},\n                    \"online_flag\": {\"type\": \"boolean\"},\n                    \"recurring_uuid\": {\"type\": [\"null\", \"string\"]},\n                    \"service\": {\"type\": [\"null\", \"number\"]}\n                },\n                \"required\": [\"appointment_id\", \"checked_in_time\", \"citizen_name\", \"comments\",\n                             \"contact_information\", \"end_time\", \"office\", \"office_id\",\n                             \"service_id\", \"start_time\", \"blackout_flag\", \"citizen_id\",\n                             \"online_flag\", \"recurring_uuid\", \"service\"]\n            }\n        },\n        \"errors\": {\"type\": [\"object\", \"string\"]}\n    },\n    \"required\": [\"appointments\"],\n};\n\n//Test to see if response schema is valid\npm.test(\"Validate Response Appointment List Schema\", function(){\n    pm.expect(tv4.validate(jsonData, appointmentSchema)).to.be.true;\n});\n"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						},
						"description": "Sets the authentication script"
					},
					"response": []
				},
				{
					"name": "Who am I TheQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "89c7d612-3c89-4e46-87fc-67f255879c7e",
								"exec": [
									"//  Ensure the client is logged in.",
									"eval(environment.auth_first);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7003dd2-fc91-4b99-8ede-720ded280c3f",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Make sure the CSR schema is OK.",
									"eval(environment.csr_schema_check)",
									"",
									"//var jsonData = pm.response.json();",
									"//pm.environment.set(\"csr_schema_check\", jsonData.data);",
									"",
									"if (jsonData.hasOwnProperty(\"csr\")) {",
									"\tcurrentOfficeId = jsonData.csr.office_id;",
									"\tcurrentOfficeNumber = jsonData.csr.office.office_number;",
									"\tcurrentCsrId = jsonData.csr.csr_id;",
									"    postman.setEnvironmentVariable(\"current_office_id\", currentOfficeId);",
									"    postman.setEnvironmentVariable(\"current_office_number\", currentOfficeNumber);",
									"    postman.setEnvironmentVariable(\"current_csr_id\", currentCsrId);",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Room IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7bfdfab-78fa-4f4f-bfb3-d320c7b6bfc4",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.room_schema_check);",
									"",
									"if (jsonData.hasOwnProperty(\"rooms\")) {",
									"    room_id_1 = jsonData.rooms[0].room_id;",
									"    room_id_2 = room_id_1;",
									"    if (jsonData.rooms.length > 1) {",
									"        room_id_2 = jsonData.rooms[1].room_id;",
									"    }",
									"    postman.setEnvironmentVariable(\"room_id_1\", JSON.stringify(room_id_1.toString()));",
									"    postman.setEnvironmentVariable(\"room_id_2\", JSON.stringify(room_id_2.toString()));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "99ab6118-5233-49fa-b361-ff859c96fa33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}rooms/",
							"host": [
								"{{url}}rooms"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Service IDs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96426fda-b9ba-4c4f-9ae0-d1dd491b6274",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2bd3945d-0601-4f72-9a57-69e9c4138eb6",
								"exec": [
									"//  Run basic tests.",
									"eval(environment.basic_response_test);",
									"",
									"//  Get json return data, check the schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.service_schema_check);",
									"",
									"//  Loop to validate schema of each channel.",
									"var allElements = jsonData.services;",
									"var elementCount = 0;",
									"var elementMax = Math.min(10, allElements.length);",
									"//allElements.forEach(function(element) {",
									"for (var currentElement = 0; currentElement < elementMax; currentElement++) {",
									"    element = allElements[currentElement];",
									"    elementCount ++;",
									"    var testTitle = \"Service (\" + elementCount + \"): \" + element.service_name;",
									"    ",
									"    //  Test the authenticate response.",
									"    pm.test(\"--> \" + testTitle + \" dashboard_ind must be 0 or 1\", function() {",
									"        pm.expect(element.display_dashboard_ind).to.be.within(0,1);",
									"    });",
									"    pm.test(\"--> \" + testTitle + \" actual_service_ind must be 1\", function() {",
									"        pm.expect(element.actual_service_ind).to.be.eql(1);",
									"    });",
									"    pm.test(\"--> \" + testTitle + \" parent_id must not be null\", function() {",
									"        pm.expect(element.parent_id).to.not.be.null;",
									"    });",
									"}",
									"",
									"//  Declare and initialize variables.",
									"var mspId = 0;",
									"var taxId = 0;",
									"var mspText = \"Payment - MSP\";",
									"var propTaxText = \"Other - PTAX\";",
									"",
									"//  Look for the MSP and Property Tax IDs.",
									"allElements.forEach(function(element) {",
									"    if (element.service_name === mspText) {",
									"        mspId = element.service_id;",
									"    }",
									"    if (element.service_name === propTaxText) {",
									"        taxId = element.service_id;",
									"    }",
									"});",
									"",
									"//  Check that you found the service IDs.",
									"pm.test(\"The \" + mspText + \" service ID (\" + mspId.toString() + \") should not equal 0\", function() {",
									"    pm.expect(mspId).to.not.be.eql(0);",
									"});",
									"",
									"pm.test(\"The \" + propTaxText + \" service ID (\" + taxId.toString() + \") should not equal 0\", function() {",
									"    pm.expect(taxId).to.not.be.eql(0);",
									"});",
									"",
									"//  Store these IDs for future use.",
									"postman.setEnvironmentVariable(\"service_MSP_id\", JSON.stringify(mspId));",
									"postman.setEnvironmentVariable(\"service_PropTax_id\", JSON.stringify(taxId));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}services/",
							"host": [
								"{{url}}services"
							],
							"path": [
								""
							]
						},
						"description": "Get a list of clients in the queue"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check app health",
			"item": [
				{
					"name": "Check healthz driver Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3142cde-9ff6-4c26-abda-6d236ad862e0",
								"exec": [
									"//  Set health response time variable.",
									"max_response_time = 1500;",
									"health_tries = 15;",
									"counter = 1;",
									"postman.setEnvironmentVariable(\"max_response_time\", JSON.stringify(max_response_time));",
									"postman.setEnvironmentVariable(\"health_tries\", JSON.stringify(health_tries));",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is health'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_response_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint Booking\");",
									"}",
									"    ",
									"//  Response time is too long.  Try again, give pod a chance to spin up.",
									"else {",
									"    postman.setNextRequest(\"Check the healthz endpoint Booking\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8d5caec5-972d-43a1-8af2-466bfcd3a4ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the healthz endpoint Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2ed292c-2b11-46d2-9bb6-82f52de67817",
								"exec": [
									"//  Get the maximum response time allowed.",
									"max_load_time = JSON.parse(globals.max_load_time);",
									"",
									"//  Get and update variables.",
									"health_tries = JSON.parse(postman.getEnvironmentVariable(\"health_tries\"));",
									"counter = JSON.parse(postman.getEnvironmentVariable(\"health_counter\")) + 1;",
									"postman.setEnvironmentVariable(\"health_counter\", JSON.stringify(counter));",
									"",
									"//  Get the response.",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Health Driver: Try \" + counter.toString() + \": Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is health'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is healthy');",
									"});",
									"",
									"//  If response time is OK, proceed to the next test.",
									"if (pm.response.responseTime < max_load_time) {",
									"    postman.setNextRequest(\"Check the readyz endpoint Booking\");",
									"}",
									"    ",
									"//  Response time is too long.",
									"else {",
									"    ",
									"    //  You haven't reached your maximum tries yet.  Try again.",
									"    if (counter < health_tries) {",
									"        postman.setNextRequest(\"Check the healthz endpoint Booking\");",
									"    }",
									"    ",
									"    //   You have reached the maximum.  An error, go to next test.",
									"    else {",
									"        pm.test(\"Response should be below \" + max_load_time.toString() + ' in ' + health_tries.toString() + ' tries.', function() {",
									"            pm.expect(counter).to.be.below(health_tries);",
									"        });",
									"        postman.setNextRequest(\"Check the readyz endpoint Booking\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1fbe469-da91-4802-9d45-63daa046ffe9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}healthz/",
							"host": [
								"{{url}}healthz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the readyz endpoint Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "708c2683-2e84-4fe3-b576-bee89d91ec44",
								"exec": [
									"//  Perform the standard tests.",
									"eval(environment.basic_response_test);",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//  Test the health response.",
									"pm.test(\"Response should have 'message' property\", function() {",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response message should be 'api is ready'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql('api is ready');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd00c3c8-ea83-4605-9cfc-8318494494ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}readyz/",
							"host": [
								"{{url}}readyz"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "Checks the application health by calling the healthz and readyz endpoints",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get Exam Types",
			"item": [
				{
					"name": "Exam Type List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c567e2c5-7183-4c9b-b893-7bf4e29dbce2",
								"exec": [
									"// Define the JSON Schema expected in response",
									"var examTypeSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"exam_types\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"exam_color\": {\"type\": \"string\"},",
									"                    \"exam_type_id\": {\"type\": \"number\"},",
									"                    \"exam_type_name\": {\"type\": \"string\"},",
									"                    \"group_exam_ind\": {\"type\": \"number\"},",
									"                    \"ita_ind\": {\"type\": \"number\"},",
									"                    \"method_type\": {\"type\": \"string\"},",
									"                    \"number_of_hours\": {\"type\": \"number\"},",
									"                    \"number_of_minutes\": {\"type\": [\"number\", \"null\"]},",
									"                    \"pesticide_exam_ind\": {\"type\": \"number\"}",
									"                },",
									"                \"required\": [\"exam_color\", \"exam_type_id\", \"exam_type_name\", \"group_exam_ind\", \"ita_ind\", \"method_type\",",
									"                             \"number_of_hours\", \"number_of_minutes\", \"pesticide_exam_ind\"]",
									"            }",
									"        },",
									"        \"errors\": {\"type\": [\"object\", \"string\"]}",
									"    },",
									"    \"required\": [\"exam_types\", \"errors\"]",
									"};",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Exam type response has valid schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, examTypeSchema)).to.be.true;",
									"});",
									"",
									"//  Store all exam type IDs for future use in adding exams",
									"var allExamIds = [];",
									"",
									"//  Make sure some data returned.",
									"pm.test(\"Response has exam_types property\", function(){",
									"    pm.expect(jsonData.hasOwnProperty(\"exam_types\")).to.be.true;",
									"});",
									"pm.test(\"Response has at least one exam_type\", function(){",
									"    pm.expect(jsonData.exam_types.length).to.be.above(0);",
									"});",
									"",
									"// Set up list of valid exam types, create random functions.",
									"eval(environment.init_exam_type_data);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exam_types/",
							"host": [
								"{{url}}exam_types"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exams",
			"item": [
				{
					"name": "Exam Post End-point",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8720db02-8865-4948-ad83-564e1808cbaa",
								"exec": [
									"//  Get exam type data and functions.",
									"exam_array = JSON.parse(postman.getEnvironmentVariable(\"exam_array_data\"));",
									"eval(environment.create_random_functions);",
									"",
									"//  Create an event number based on the time.",
									"var ms = (new Date().getTime()).toString() + \"00\";",
									"eventNumber = Number(ms.substring(ms.length-6, ms.len)) + 1;",
									"postman.setEnvironmentVariable(\"event_number\", eventNumber);",
									"",
									"//  Update the next event ID.",
									"var eventId = \"pm\" + eventNumber.toString();",
									"postman.setEnvironmentVariable(\"update_number\", 0);",
									"postman.setEnvironmentVariable(\"event_id\", JSON.stringify(eventId));",
									"postman.setEnvironmentVariable(\"event_delete\", eventId);",
									"",
									"//  Calculate a random exam type to use.",
									"random_index = get_random_index(exam_array);",
									"",
									"//  Store for use.",
									"random_exam_type_id = exam_array[random_index].id;",
									"postman.setEnvironmentVariable(\"random_exam_type_id\", JSON.stringify(random_exam_type_id.toString()));",
									"",
									"//  Store other variables for later use.",
									"postman.setEnvironmentVariable(\"exam_method\", JSON.stringify(\"paper\"));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"Postman Group Exam Name\"));",
									"postman.setEnvironmentVariable(\"exam_written_ind\", JSON.stringify(\"0\"));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"Postman Examinee Name\"));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"Postman Test Notes\"));",
									"postman.setEnvironmentVariable(\"number_of_students\", JSON.stringify(\"19\"));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"Postman test location\"));",
									"",
									"//  Calculate an expiry date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format expiry date for the exam.",
									"expiry_date = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"expiry_date\", JSON.stringify(expiry_date));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2f478ec-8930-4aa9-b756-7c0a3d9f1ca1",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);",
									"",
									"//  If jsonData has an exam property, save exam ID.",
									"if (jsonData.hasOwnProperty(\"exam\")) {",
									"\tcurrentExamId = jsonData.exam.exam_id;",
									"    postman.setEnvironmentVariable(\"current_exam_id\", currentExamId);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n\t\"event_id\" : {{event_id}},\n    \"exam_method\" : \"paper\",\n    \"exam_name\" : \"Postman Group Exam Name\",\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : \"0\",\n    \"examinee_name\" : \"Pm examinee name\",\n    \"notes\" : \"Pm sample notes\",\n    \"number_of_students\" : \"19\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : \"Pm test location\",\n    \"expiry_date\": {{expiry_date}}\n}"
						},
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8da37b4-9bc8-4182-9996-69d1d111ab41",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31bea5f7-c532-4ea3-867c-8de0e0f032bd",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_list_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exams/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Put End-point",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0625b7bb-6742-4f6d-8a34-ee79650c1867",
								"exec": [
									"//  Update the next event ID.",
									"var eventNumber = JSON.parse(postman.getEnvironmentVariable(\"event_number\"));",
									"var updateNumber = JSON.parse(postman.getEnvironmentVariable(\"update_number\")) + 1;",
									"var updateEventId = eventNumber;",
									"postman.setEnvironmentVariable(\"update_number\", updateNumber);",
									"postman.setEnvironmentVariable(\"update_id\", JSON.stringify(updateEventId.toString()));",
									"postman.setEnvironmentVariable(\"exam_name\", JSON.stringify(\"PM exam name - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"examinee_name\", JSON.stringify(\"PM examinee - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"notes\", JSON.stringify(\"PM exam notes - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"offsite_location\", JSON.stringify(\"PM offsite location - Update \" + updateNumber.toString()));",
									"postman.setEnvironmentVariable(\"number_of_students\", JSON.stringify(\"21\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bbf1dc2a-75df-4db5-9df1-1504d2dfaa3e",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_id\" : {{update_id}},\n    \"exam_method\" : {{exam_method}},\n    \"exam_name\" : {{exam_name}},\n    \"exam_type_id\" : {{random_exam_type_id}},\n    \"exam_written_ind\" : {{exam_written_ind}},\n    \"examinee_name\" : {{examinee_name}},\n    \"notes\" : {{notes}},\n    \"number_of_students\" : \"119\",\n    \"office_id\" : {{current_office_id}},\n    \"offsite_location\" : {{offsite_location}}\n}\n"
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "289d198b-cdad-47e7-9582-e2b84847d900",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.exam_schema_check);",
									"eval(environment.exam_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e88a563e-4482-4e7a-8547-90152f8cf5a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam by Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "539fde72-7cd5-4714-9a93-571f2ebefd01",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Define the JSON Schema expected in response",
									"var examSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"message\": {\"type\": \"boolean\"}",
									"    },",
									"    \"required\": [\"message\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Response Exam Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;",
									"});",
									"",
									"//  Make sure the message is true.",
									"pm.test(\"Result is '\" + jsonData.message.toString() + \"', it should be 'true'\", function() {",
									"    pm.expect(jsonData.message).to.be.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c72407f8-c71d-44c7-8a91-2e3e7442b43b",
								"exec": [
									"//  Put the event ID in the right format.\r",
									"var event_number = JSON.parse(postman.getEnvironmentVariable(\"update_id\"))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exams/event_id/{{event_number}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"event_id",
								"{{event_number}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exam Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bce0558d-8974-46b5-b386-75d3f4172c96",
								"exec": [
									"//  Get the max response time allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"",
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}exams/{{current_exam_id}}/",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"{{current_exam_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Exams Export",
			"item": [
				{
					"name": "Exams Export List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e778e74f-bc51-4366-aa65-49d58e4c62ec",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time less than 20,000ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(20000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ce9b15c-029b-4b02-a9d2-657752b5e9b0",
								"exec": [
									"//  Calculate a start date four weeks prior to today.",
									"var start = new Date();",
									"start.setDate(start.getDate()-28);",
									"",
									"//  Get year, day, month from the start time.",
									"start_year = start.getFullYear().toString();",
									"start_month = (\"0\" + (start.getMonth() + 1).toString()).slice(-2);",
									"start_day = (\"0\" + (start.getDate()).toString()).slice(-2);",
									"start_date = start_year + \"-\" + start_month + \"-\" + start_day;",
									"",
									"//  Get year, day, month from the current day.",
									"var today = new Date();",
									"end_year = today.getFullYear().toString();",
									"end_month = (\"0\" + (today.getMonth() + 1).toString()).slice(-2);",
									"end_day = (\"0\" + (today.getDate()).toString()).slice(-2);",
									"end_date = end_year + \"-\" + end_month + \"-\" + end_day;",
									"",
									"console.log(\"Start: \" + start_date);",
									"console.log(\"End:   \" + end_date);",
									"pm.globals.set(\"start_date\", start_date);",
									"pm.globals.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}exams/export/?start_date={{start_date}}&end_date={{end_date}}",
							"host": [
								"{{url}}exams"
							],
							"path": [
								"export",
								""
							],
							"query": [
								{
									"key": "start_date",
									"value": "{{start_date}}"
								},
								{
									"key": "end_date",
									"value": "{{end_date}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Booking Post End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05001c1d-2d22-4e00-993b-e3a684a80aad",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"var booking_id = jsonData.booking.booking_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"booking_id\", JSON.stringify(booking_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc5b1e95-7cf4-43af-88f0-03a949c0eb2d",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"fees\", JSON.stringify(\"false\"));",
									"pm.globals.set(\"booking_name\", JSON.stringify(\"Super big demo next week\"));",
									"pm.globals.set(\"room_id\", pm.environment.get(\"room_id_1\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"office_id\" : {{current_office_id}}\n}\n"
						},
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c0b6897-9113-4fb4-bf19-8fc47795366e",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62439fb5-5eae-417d-b0f5-8994f04ef126",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_list_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Put End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e1616e1-f3c7-4a86-8109-cbec0b8f0a31",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8d2d7494-a99f-41b4-b1ca-38809e853ee1",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"fees\", JSON.stringify(\"true\"));",
									"pm.globals.set(\"booking_name\", JSON.stringify(\"Time to pay your fees!\"));",
									"pm.globals.set(\"room_id\", pm.environment.get(\"room_id_2\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"office_id\" : {{current_office_id}}\n}"
						},
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Detail End-point Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1cc3c56-730e-4ca5-b694-4f3ffecbb956",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97aa56bf-91bb-4732-8dea-1205b86dc6d0",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Booking Recurring",
			"item": [
				{
					"name": "Book first recurring event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3957eeba-3a57-4e85-8e98-fe15c7f63731",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"var booking_id = jsonData.booking.booking_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"booking_id\", JSON.stringify(booking_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0bad8355-1e1d-4fa6-ad71-7a6ffafecc0c",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"fees\", JSON.stringify(\"false\"));",
									"pm.globals.set(\"booking_name\", JSON.stringify(\"Super big demo next week\"));",
									"pm.globals.set(\"booking_contact_information\", JSON.stringify(\"Postman Contact\"));",
									"pm.globals.set(\"room_id\", pm.environment.get(\"room_id_1\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"booking_contact_information\": {{booking_contact_information}},\n  \"office_id\" : {{current_office_id}},\n  \"recurring_uuid\": {{pm_booking_uuid}}\n}\n"
						},
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Book second recurring event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ada031e-73c1-4608-817d-d81bf8bae704",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"var booking_id = jsonData.booking.booking_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"second_event_id\", JSON.stringify(booking_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d73a5cdb-61ce-4367-97a2-1dfa9038fea1",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+8);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"booking_contact_information\": {{booking_contact_information}},\n  \"office_id\" : {{current_office_id}},\n  \"recurring_uuid\": {{pm_booking_uuid}}\n}\n"
						},
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Book third recurring event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b7a9e34-1fb6-4f29-8fa3-ef33e671f738",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"var booking_id = jsonData.booking.booking_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"third_event_id\", JSON.stringify(booking_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "894eb656-bdea-4904-8517-fb63d2a4d56f",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+9);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"//  Store globals.",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_time\": {{start_time}},\n  \"end_time\": {{end_time}},\n  \"room_id\": {{room_id}},\n  \"fees\": {{fees}},\n  \"booking_name\": {{booking_name}},\n  \"booking_contact_information\": {{booking_contact_information}},\n  \"office_id\" : {{current_office_id}},\n  \"recurring_uuid\": {{pm_booking_uuid}}\n}\n"
						},
						"url": {
							"raw": "{{url}}bookings/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70ee7f1d-64a8-4713-8af8-db2a15a82dc7",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = JSON.parse(pm.globals.get(\"booking_name\"));",
									"var contact_expect = JSON.parse(pm.globals.get(\"booking_contact_information\"));",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8c56b42-4c92-4e7d-980d-bc1e69996677",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = JSON.parse(pm.globals.get(\"booking_name\"));",
									"var contact_expect = JSON.parse(pm.globals.get(\"booking_contact_information\"));",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{second_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{second_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check third booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9676193b-3c6b-4991-82b0-28d5ba20239d",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = JSON.parse(pm.globals.get(\"booking_name\"));",
									"var contact_expect = JSON.parse(pm.globals.get(\"booking_contact_information\"));",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{third_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{third_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update second event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adfda9a4-fd29-4c77-90b4-d7d0ef381ce7",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "93666295-cc74-485b-85c9-bc78926a8a79",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n  \"booking_name\": \"Second booking event updated\",\n  \"booking_contact_information\": \"My_favourite_postman@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{url}}bookings/{{second_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{second_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first booking again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "120ce07a-0c3f-4952-9436-b7164926c338",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = JSON.parse(pm.globals.get(\"booking_name\"));",
									"var contact_expect = JSON.parse(pm.globals.get(\"booking_contact_information\"));",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second booking after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76eb6fa8-b069-498f-8184-138863c9fb06",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = \"Second booking event updated\";",
									"var contact_expect = \"My_favourite_postman@gmail.com\";",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{second_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{second_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check third booking again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35e7b030-029c-42e4-8b68-9534a8fe5e65",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = JSON.parse(pm.globals.get(\"booking_name\"));",
									"var contact_expect = JSON.parse(pm.globals.get(\"booking_contact_information\"));",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{third_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{third_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6e113a5-6b36-4216-b7a9-caf82468de48",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"// Define the JSON Schema expected in response",
									"var examSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"bookings\": {\"type\": \"object\"},",
									"        \"errors\": {\"type\": [\"object\", \"string\"]}",
									"    },",
									"    \"required\": [\"bookings\", \"errors\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Update all events schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, examSchema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "831f76ce-b85b-454f-bc4a-27438659d238",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Print out the recurring booking ID.",
									"console.log(\"Recurring booking uuid:\");",
									"console.log(pm.globals.get(\"pm_booking_uuid\"));",
									"pm_url_uuid = JSON.parse(pm.globals.get(\"pm_booking_uuid\"))",
									"console.log(pm_url_uuid);",
									"pm.globals.set(\"pm_url_uuid\", pm_url_uuid);",
									"     ",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n  \"booking_name\": \"All recurring pm events #2\",\n  \"booking_contact_information\": \"My_second_favourite_postman@gmail.com\",\n  \"invigilator_id\": []\n}"
						},
						"url": {
							"raw": "{{url}}bookings/recurring/{{pm_url_uuid}}",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"recurring",
								"{{pm_url_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first booking update all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43f9389a-a31b-4861-ac48-887dfde32783",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = \"All recurring pm events #2\";",
									"var contact_expect = \"My_second_favourite_postman@gmail.com\";",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{booking_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{booking_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second booking update all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "401248bb-6a4e-4475-a78a-fc45c025a6bf",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = \"All recurring pm events #2\";",
									"var contact_expect = \"My_second_favourite_postman@gmail.com\";",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{second_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{second_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check third booking update all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c9a0b09-b7a5-496e-804c-718dc6388cc6",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.booking_schema_check);",
									"eval(environment.booking_data_check);",
									"",
									"//  Get booking data.",
									"var name = jsonData.booking.booking_name;",
									"var contact = jsonData.booking.booking_contact_information;",
									"var name_expect = \"All recurring pm events #2\";",
									"var contact_expect = \"My_second_favourite_postman@gmail.com\";",
									"",
									"//  Make sure data for the first booking hasn't changed.",
									"pm.test(\"Name should be '\" + name_expect + \"'; it is '\" + name + \"'\", function () {",
									"    pm.expect(name).to.be.eql(name_expect);",
									"});",
									"pm.test(\"Contact should be '\" + contact_expect + \"'; it is '\" + contact + \"'\", function () {",
									"    pm.expect(contact).to.be.eql(contact_expect);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}bookings/{{third_event_id}}/",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"{{third_event_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a42eaa3-2071-45ba-a568-624b5ebef990",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}bookings/recurring/{{pm_url_uuid}}",
							"host": [
								"{{url}}bookings"
							],
							"path": [
								"recurring",
								"{{pm_url_uuid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Invigilators checks",
			"item": [
				{
					"name": "Invigilators",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ed705c7-a16b-483a-960b-a84f524b45fe",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.invigilator_schema_check);",
									"",
									"//  Make sure there is at least one invigilator.",
									"invigilators = jsonData.invigilators;",
									"pm.test(\"Number of invigilators is \" + invigilators.length.toString() + \", must not be 0\", function() {",
									"    pm.expect(invigilators.length).to.not.be.eql(0);",
									"})",
									"",
									"//  Get the first invigilator.",
									"first = invigilators[0];",
									"",
									"//  Make sure the invigilator shadow count is 2, and the flag is \"Y\"",
									"pm.test(\"Invigilator shadow count is \" + first.shadow_count.toString() + \", must be 2\", function() {",
									"    pm.expect(first.shadow_count).to.be.eql(2);",
									"})",
									"pm.test(\"Invigilator shadow flag is \" + first.shadow_flag.toString() + \", must be 'Y'\", function() {",
									"    pm.expect(first.shadow_flag).to.be.eql(\"Y\");",
									"})",
									"",
									"//  Save some values of the first invigilator.",
									"invId = first.invigilator_id;",
									"count = first.shadow_count;",
									"flag = first.shadow_flag;",
									"postman.setEnvironmentVariable(\"inv_id\", invId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}invigilators/",
							"host": [
								"{{url}}invigilators"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Invigilators offsite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee03b9b1-2a8a-42e7-9337-f70c3bfb06b4",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body, test the schema.",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.invigilator_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}invigilators/offsite/",
							"host": [
								"{{url}}invigilators"
							],
							"path": [
								"offsite",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Invigilator subtract",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acc274b3-4a46-4f33-8799-2e13b2b9a586",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.invig_one_schema_check);",
									"",
									"first = jsonData.invigilator;",
									"",
									"//  Save some values.",
									"newId = first.invigilator_id;",
									"newEmail = first.contact_email;",
									"newPhone = first.contact_phone;",
									"newNotes = first.invigilator_notes;",
									"newCount = first.shadow_count;",
									"newFlag = first.shadow_flag;",
									"",
									"//  Temporary debugging.",
									"console.log(\"==> New invigilator data:\");",
									"console.log(\"    --> id:    \" + newId);",
									"console.log(\"    --> email: \" + newEmail);",
									"console.log(\"    --> phone: \" + newPhone);",
									"console.log(\"    --> notes: \" + newNotes);",
									"console.log(\"    --> count: \" + newCount);",
									"console.log(\"    --> flag:  \" + newFlag);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}invigilator/{{inv_id}}/?subtract=True&add=False",
							"host": [
								"{{url}}invigilator"
							],
							"path": [
								"{{inv_id}}",
								""
							],
							"query": [
								{
									"key": "subtract",
									"value": "True"
								},
								{
									"key": "add",
									"value": "False"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invigilator add",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d026a2d9-2398-47b9-af15-40de10b7266e",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.invig_one_schema_check);",
									"",
									"first = jsonData.invigilator;",
									"",
									"//  Save some values.",
									"newId = first.invigilator_id;",
									"newEmail = first.contact_email;",
									"newPhone = first.contact_phone;",
									"newNotes = first.invigilator_notes;",
									"newCount = first.shadow_count;",
									"newFlag = first.shadow_flag;",
									"",
									"//  Temporary debugging.",
									"console.log(\"==> New invigilator data:\");",
									"console.log(\"    --> id:    \" + newId);",
									"console.log(\"    --> email: \" + newEmail);",
									"console.log(\"    --> phone: \" + newPhone);",
									"console.log(\"    --> notes: \" + newNotes);",
									"console.log(\"    --> count: \" + newCount);",
									"console.log(\"    --> flag:  \" + newFlag);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}invigilator/{{inv_id}}/?subtract=False&add=True",
							"host": [
								"{{url}}invigilator"
							],
							"path": [
								"{{inv_id}}",
								""
							],
							"query": [
								{
									"key": "subtract",
									"value": "False"
								},
								{
									"key": "add",
									"value": "True"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Rooms",
			"item": [
				{
					"name": "Room List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45b9c1ec-1e98-4ccf-8c03-ac5633ea561e",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.room_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}rooms/",
							"host": [
								"{{url}}rooms"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CSRS",
			"item": [
				{
					"name": "CSRS Me Get End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54d062a7-5ca1-42e8-bff9-816a4e5469a8",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.csr_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5664d39e-415c-4348-ae73-b3f76b463f23",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}csrs/me/",
							"host": [
								"{{url}}csrs"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Offices",
			"item": [
				{
					"name": "Office List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "852c4c94-480b-4ebe-98ea-30fcc19fd2b5",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"eval(environment.all_office_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}offices/",
							"host": [
								"{{url}}offices"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Office Available Timeslots",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db1f1aef-0aa7-4339-a83b-919869a6b6ff",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}offices/{{current_office_id}}/slots/",
							"host": [
								"{{url}}offices"
							],
							"path": [
								"{{current_office_id}}",
								"slots",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Appointments",
			"item": [
				{
					"name": "Appointment Post End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ab223cb-ebce-4238-84d2-e5620f35f1e0",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									"",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"appointment_id\", JSON.stringify(appointment_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f9bef2-588c-42f6-a437-52d9599af5ba",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"category\", JSON.stringify(\"Exam\"));",
									"pm.globals.set(\"service_id\", pm.environment.get(\"service_PropTax_id\"));",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"Missed playoffs, needs to talk #1.\"));",
									"pm.globals.set(\"appt_citizen_name\", JSON.stringify(\"LeBron James Appointment #1\"));",
									"pm.globals.set(\"appt_contact_information\", JSON.stringify(\"My contact info\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"service_id\": {{service_id}},\n \"office_id\" : {{current_office_id}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"category\": {{category}},\n \"comments\": {{appt_comments}},\n \"citizen_name\": {{appt_citizen_name}},\n \"contact_information\": {{appt_contact_information}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Detail End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54955211-4cd3-48be-9042-2e67369a5138",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment List End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8895c9a-b5e0-4bed-a711-cbade6d47f56",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid\\",
									"eval(environment.appointment_list_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Put End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00562e49-932b-4b36-9d81-180f1c1daa84",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7a5187ce-ed81-42f5-8dde-5986d9ca641b",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"super EARLY\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"office_id\" : {{current_office_id}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"category\": {{category}},\n \"comments\": {{appt_comments}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b3eb6a3-3378-4d46-9093-4405571df5d8",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Appointments Recurring",
			"item": [
				{
					"name": "Book first appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e4b2ae4-a6a1-4ba9-ac24-f37a582456a0",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									"",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"appointment_id\", JSON.stringify(appointment_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9cf23b0f-cc63-4628-9b54-cfe495cf13d4",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"category\", JSON.stringify(\"Exam\"));",
									"pm.globals.set(\"service_id\", pm.environment.get(\"service_PropTax_id\"));",
									"pm.globals.set(\"appt_citizen_name\", JSON.stringify(\"BLACKOUT PERIOD\"));",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"Office needs a break\"));",
									"pm.globals.set(\"appt_contact_information\", JSON.stringify(\"Contact info, me@me.com\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"blackout_flag\" : \"Y\",\n \"citizen_name\" : {{appt_citizen_name}},\n \"comments\" : {{appt_comments}},\n \"contact_information\" : {{appt_contact_information}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"office_id\" : {{current_office_id}},\n \"recurring_uuid\": {{pm_appt_uuid}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Book second appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42bbd911-7bc3-4013-b2cf-ed835bb60017",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									"",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"second_appt_id\", JSON.stringify(appointment_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d65d7724-ccf3-44da-b900-d38df1fccec9",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+8);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"blackout_flag\" : \"Y\",\n \"citizen_name\" : {{appt_citizen_name}},\n \"comments\" : {{appt_comments}},\n \"contact_information\" : {{appt_contact_information}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"office_id\" : {{current_office_id}},\n \"recurring_uuid\": {{pm_appt_uuid}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Book third appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc207f1e-a0af-4ba5-a0cd-c73f2b307b35",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									"",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"",
									"//Dynamic variable used for end-point testing later on",
									"postman.setEnvironmentVariable(\"third_appt_id\", JSON.stringify(appointment_id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a953f3a9-3113-48c6-9514-37430e299d0d",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+9);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T17:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T19:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"blackout_flag\" : \"Y\",\n \"citizen_name\" : {{appt_citizen_name}},\n \"comments\" : {{appt_comments}},\n \"contact_information\" : {{appt_contact_information}},\n \"start_time\": {{start_time}},\n \"end_time\": {{end_time}},\n \"office_id\" : {{current_office_id}},\n \"recurring_uuid\": {{pm_appt_uuid}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6e87181-0a95-408d-8744-a801e81ba00a",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1e5795b-89fc-4416-8cb8-09687c70d005",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{second_appt_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{second_appt_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check third appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cef5adf5-7912-4166-9327-2ee5602d2f20",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{third_appt_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{third_appt_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update second appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4eb94879-3fec-4f6e-83c3-b3b23b593390",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0363535d-8332-48ef-b71a-8a2dbe4d91e9",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T21:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"",
									"pm.globals.set(\"start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"end_time\", JSON.stringify(end_time));",
									"",
									"pm.globals.set(\"appt_citizen_name\", JSON.stringify(\"BLACKOUT UPDATE 2nd\"));",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"Update blackout comments\"));",
									"pm.globals.set(\"appt_contact_information\", JSON.stringify(\"Update blackout contact\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"citizen_name\" : {{appt_citizen_name}},\n \"comments\" : {{appt_comments}},\n \"contact_information\" : {{appt_contact_information}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/{{second_appt_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{second_appt_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second appointment again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06caf238-7a86-4b38-9d32-eeec08e05350",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{second_appt_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{second_appt_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first appointment again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dbacbaa-5adb-46dc-9cfc-12c03825e5f4",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ab7b7714-5e70-411e-b374-335281846843",
								"exec": [
									"//  Reset variables back to their first and third appt values.\r",
									"pm.globals.set(\"appt_citizen_name\", JSON.stringify(\"BLACKOUT PERIOD\"));\r",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"Office needs a break\"));\r",
									"pm.globals.set(\"appt_contact_information\", JSON.stringify(\"Contact info, me@me.com\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check third appointment again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ed7e0a4-88cb-4a7f-8ec3-b82e057b3d07",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{third_appt_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{third_appt_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64ae762f-7099-422d-ab87-595ce6fcf1f4",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// Define the JSON Schema expected in response",
									"var apptAllSchema = {",
									"    \"type\": \"object\", ",
									"    \"properties\": {",
									"        \"appointments\": {\"type\": \"object\"},",
									"        \"errors\": {\"type\": [\"object\", \"string\"]}",
									"    },",
									"    \"required\": [\"appointments\", \"errors\"],",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate Recurring Appointments Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, apptAllSchema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4568c8ac-17f4-458e-bb20-6b050244455b",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"later.setDate(later.getDate()+7);",
									"",
									"//  Print out the appointment ID.",
									"pm_url_uuid = JSON.parse(pm.globals.get(\"pm_appt_uuid\"))",
									"pm.globals.set(\"pm_url_uuid\", pm_url_uuid);",
									"",
									"pm.globals.set(\"appt_citizen_name\", JSON.stringify(\"BLACKOUT ALL UPDATE\"));",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"All blackout comments\"));",
									"pm.globals.set(\"appt_contact_information\", JSON.stringify(\"All Update blackout contacts\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"citizen_name\" : {{appt_citizen_name}},\n \"comments\" : {{appt_comments}},\n \"contact_information\" : {{appt_contact_information}}\n}"
						},
						"url": {
							"raw": "{{url}}appointments/recurring/{{pm_url_uuid}}",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"recurring",
								"{{pm_url_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first appointment all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dce46fbd-139c-4632-96ed-5a4ebd35e3fb",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second appointment all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de36ec54-f328-47d4-9afc-e5c9889c895b",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{second_appt_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{second_appt_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check third appointment all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4160d563-0c6e-4a67-ab99-2dc852c7298b",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"eval(environment.appointment_data_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}appointments/{{appointment_id}}/",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4797aee6-d397-49d5-ba9a-656a7e4aeb8a",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}appointments/recurring/{{pm_url_uuid}}",
							"host": [
								"{{url}}appointments"
							],
							"path": [
								"recurring",
								"{{pm_url_uuid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Public User Appointments",
			"item": [
				{
					"name": "Authenticate and create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2910f8f4-6543-4bba-81cd-0b70ceae8e5a",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var allSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {\"type\": \"object\"}",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate All Users Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, allSchema)).to.be.true;",
									"});",
									"",
									"var firstUser = jsonData[0];",
									"",
									"var userSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"email\": {\"type\": \"string\"},",
									"        \"last_name\": {\"type\": \"string\"},",
									"        \"user_id\": {\"type\": \"number\"},",
									"        \"username\": {\"type\": \"string\"},",
									"        \"send_reminders\": {\"type\": \"boolean\"},",
									"        \"display_name\": {\"type\": \"string\"},",
									"        \"telephone\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"email\", \"last_name\", \"user_id\", \"username\", \"send_reminders\",",
									"                 \"display_name\", \"telephone\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate First User Schema\", function(){",
									"    pm.expect(tv4.validate(firstUser, userSchema)).to.be.true;",
									"});",
									"",
									"//Dynamic variables used for end-point testing later on",
									"var user_id = firstUser.user_id;",
									"var user_phone = firstUser.telephone;",
									"postman.setEnvironmentVariable(\"user_id\", JSON.stringify(user_id));",
									"postman.setEnvironmentVariable(\"user_phone\", JSON.stringify(user_phone));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Typea",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{public_user_id}}&password={{public_user_password}}&client_secret={{client_secret}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{public_url}}users/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Book an appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e929c2a2-9f3d-4db0-bfa1-8ad2bdef8657",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid",
									"eval(environment.appointment_schema_check);",
									"",
									"//  Update the comments to include phone number, before data test.",
									"var comments_old = JSON.parse(pm.globals.get(\"appt_comments\"));",
									"var user_phone = JSON.parse(postman.getEnvironmentVariable(\"user_phone\"));",
									"var comments_new = comments_old + '. Phone: ' + user_phone;",
									"console.log(\"==> Old:   \" + comments_old);",
									"console.log(\"==> Phone: \" + user_phone);",
									"console.log(\"==> New:   \" + comments_new);",
									"pm.globals.set(\"appt_comments\", JSON.stringify(comments_new));",
									"",
									"//  Now ready for the data check.",
									"eval(environment.appointment_data_check);",
									"",
									"//Dynamic variable used for end-point testing later on",
									"var appointment_id = jsonData.appointment.appointment_id;",
									"postman.setEnvironmentVariable(\"appointment_id\", JSON.stringify(appointment_id));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e58a533-d920-4371-b1d1-178533374222",
								"exec": [
									"//  Calculate a start date a week from today.",
									"var later = new Date();",
									"var day = later.getDay();",
									"later.setDate(later.getDate() + 5 + (day === 6 ? 2 : +!day) + (Math.floor((5 - 1 + (day % 6 || 1)) / 5) * 2));",
									"",
									"//  Get year, day, month from the later time.",
									"year = later.getFullYear().toString();",
									"month = (\"0\" + (later.getMonth() + 1).toString()).slice(-2);",
									"day = (\"0\" + (later.getDate()).toString()).slice(-2);",
									"",
									"//  Format starting and ending time for the booking.",
									"start_time = year + \"-\" + month + \"-\" + day + \"T23:00:00Z\";",
									"end_time = year + \"-\" + month + \"-\" + day + \"T23:30:00Z\";",
									"",
									"pm.globals.set(\"public_start_time\", JSON.stringify(start_time));",
									"pm.globals.set(\"public_end_time\", JSON.stringify(end_time));",
									"pm.globals.set(\"category\", JSON.stringify(\"Exam\"));",
									"pm.globals.set(\"service_id\", pm.environment.get(\"service_PropTax_id\"));",
									"pm.globals.set(\"appt_comments\", JSON.stringify(\"My self serve appt.\"));",
									"pm.globals.set(\"appt_citizen_name\", JSON.stringify(\"cfms-postman-public-user\"));",
									"pm.globals.set(\"appt_contact_information\", JSON.stringify(\"test@test.com\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"service_id\": {{service_id}},\n \"office_id\" : {{current_office_id}},\n \"start_time\": {{public_start_time}},\n \"end_time\": {{public_end_time}},\n \"category\": {{category}},\n \"comments\": {{appt_comments}},\n \"citizen_name\": {{appt_citizen_name}},\n \"contact_information\": {{appt_contact_information}}\n}"
						},
						"url": {
							"raw": "{{public_url}}appointments/",
							"host": [
								"{{public_url}}appointments"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b0f5e9e-f67e-4702-83cd-ac95ea79aff2",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var allSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {\"type\": \"object\"}",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate All Users Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, allSchema)).to.be.true;",
									"});",
									"",
									"var firstUser = jsonData[0];",
									"",
									"var userSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"email\": {\"type\": \"string\"},",
									"        \"last_name\": {\"type\": \"string\"},",
									"        \"user_id\": {\"type\": \"number\"},",
									"        \"username\": {\"type\": \"string\"},",
									"        \"send_reminders\": {\"type\": \"boolean\"},",
									"        \"display_name\": {\"type\": \"string\"},",
									"        \"telephone\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"email\", \"last_name\", \"user_id\", \"username\", \"send_reminders\",",
									"                 \"display_name\", \"telephone\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate First User Schema\", function(){",
									"    pm.expect(tv4.validate(firstUser, userSchema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@test.com\",\n    \"telephone\": \"7787777777\",\n    \"send_reminders\": true\n}"
						},
						"url": {
							"raw": "{{public_url}}users/{{user_id}}/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								"{{user_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0703780-da8c-48f5-9c29-b7664122adee",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var allSchema = {",
									"    \"type\": \"array\",",
									"    \"items\": {\"type\": \"object\"}",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate All Users Schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, allSchema)).to.be.true;",
									"});",
									"",
									"var firstUser = jsonData[0];",
									"",
									"var userSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"email\": {\"type\": \"string\"},",
									"        \"last_name\": {\"type\": \"string\"},",
									"        \"user_id\": {\"type\": \"number\"},",
									"        \"username\": {\"type\": \"string\"},",
									"        \"send_reminders\": {\"type\": \"boolean\"},",
									"        \"display_name\": {\"type\": \"string\"},",
									"        \"telephone\": {\"type\": \"string\"}",
									"    },",
									"    \"required\": [\"email\", \"last_name\", \"user_id\", \"username\", \"send_reminders\",",
									"                 \"display_name\", \"telephone\"]",
									"};",
									"",
									"//Test to see if response schema is valid",
									"pm.test(\"Validate First User Schema\", function(){",
									"    pm.expect(tv4.validate(firstUser, userSchema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{public_url}}users/me/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List all appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c76dc7d7-893e-4f31-a2ae-d6b2c8d3ecef",
								"exec": [
									"//  Run basic response tests.",
									"eval(environment.basic_response_test);",
									"",
									"// Parse response body",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Test to see if response schema is valid\\",
									"eval(environment.appointment_list_schema_check);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{public_url}}users/appointments/",
							"host": [
								"{{public_url}}users"
							],
							"path": [
								"appointments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Appointment Delete End-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a85e25b0-844d-439b-b07a-97c93bfe041c",
								"exec": [
									"// Check Response code for request",
									"pm.test(\"Response code for request is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//  Check if response time less than max allowed.",
									"var response_max = JSON.parse(globals.response_max);",
									"pm.test(\"Response time less than \" + response_max.toString() + \"ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(response_max);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{public_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{public_url}}appointments/{{appointment_id}}/",
							"host": [
								"{{public_url}}appointments"
							],
							"path": [
								"{{appointment_id}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b5f43b7-9b42-45b9-93e0-c6048a3a9ef8",
						"type": "text/javascript",
						"exec": [
							"auth_url = globals.auth_url;",
							"realm = globals.realm;",
							"clientid = globals.clientid;",
							"userid = globals.public_user_id;",
							"password = globals.public_user_password;",
							"client_secret = globals.client_secret;",
							"",
							"const echoPostRequest = {",
							"  url: auth_url + '/auth/realms/' + realm + '/protocol/openid-connect/token',",
							"  method: 'POST',",
							"  header: 'Content-Type:application/x-www-form-urlencoded',",
							"  body: {",
							"    mode: 'raw',",
							"    raw: 'grant_type=password&client_id=' + clientid ",
							"          + '&username=' + userid ",
							"          + '&password=' + password",
							"          + '&client_secret=' + client_secret",
							"  }",
							"};",
							"pm.sendRequest(echoPostRequest, function (err, res) {",
							"    var jsonData = res.json();",
							"    if (jsonData.hasOwnProperty('access_token')) {",
							"    \tpm.globals.set(\"public_user_token\", jsonData.access_token);",
							"\t    pm.globals.set(\"public_user_refresh_token\", jsonData.refresh_token);",
							"\t    if (err) {",
							"\t        console.log(err);",
							"\t    }",
							"\t    // console.log(err ? err : res.json());",
							"\t} else {",
							"\t    pm.globals.set(\"public_user_token\", 0);",
							"\t    pm.globals.set(\"public_user_refresh_token\", 0);",
							"\t}",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eeb1107c-a0d6-4314-b4a6-122aa0d25655",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}